create type "public"."affiliate_status_enum" as enum ('Dentro de convenio', 'Fuera de convenio');

create type "public"."condition_enum" as enum ('operativo', 'no operativo', 'en reparación', 'operativo condicionado');

create type "public"."daily_report_status" as enum ('pendiente', 'ejecutado', 'reprogramado', 'cancelado');

create type "public"."document_applies" as enum ('Persona', 'Equipos', 'Empresa');

create type "public"."document_type_enum" as enum ('DNI', 'LE', 'LC', 'PASAPORTE');

create type "public"."gender_enum" as enum ('Masculino', 'Femenino', 'No Declarado');

create type "public"."level_of_education_enum" as enum ('Primario', 'Secundario', 'Terciario', 'Universitario', 'PosGrado');

create type "public"."marital_status_enum" as enum ('Casado', 'Soltero', 'Divorciado', 'Viudo', 'Separado');

create type "public"."modulos" as enum ('empresa', 'empleados', 'equipos', 'documentación', 'mantenimiento', 'dashboard', 'ayuda', 'operaciones', 'formularios');

create type "public"."nationality_enum" as enum ('Argentina', 'Extranjero');

create type "public"."notification_categories" as enum ('vencimiento', 'noticia', 'advertencia', 'aprobado', 'rechazado');

create type "public"."reason_for_termination_enum" as enum ('Despido sin causa', 'Renuncia', 'Despido con causa', 'Acuerdo de partes', 'Fin de contrato', 'Fallecimiento');

create type "public"."repair_state" as enum ('Pendiente', 'Esperando repuestos', 'En reparación', 'Finalizado', 'Rechazado', 'Cancelado', 'Programado');

create type "public"."roles_enum" as enum ('Externo', 'Auditor');

create type "public"."state" as enum ('presentado', 'rechazado', 'aprobado', 'vencido', 'pendiente');

create type "public"."status_type" as enum ('Avalado', 'No avalado', 'Incompleto', 'Completo', 'Completo con doc vencida');

create type "public"."type_of_contract_enum" as enum ('Período de prueba', 'A tiempo indeterminado', 'Plazo fijo');

create type "public"."type_of_maintenance_ENUM" as enum ('Correctivo', 'Preventivo');

create sequence "public"."documents_employees_logs_id_seq";

create sequence "public"."measure_units_id_seq";

create table "public"."assing_customer" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "customer_id" uuid not null,
    "employee_id" uuid not null,
    "equipment_id" uuid not null
);


alter table "public"."assing_customer" enable row level security;

create table "public"."brand_vehicles" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text,
    "is_active" boolean default true,
    "company_id" uuid
);


alter table "public"."brand_vehicles" enable row level security;

create table "public"."category" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "covenant_id" uuid,
    "name" text,
    "is_active" boolean default true
);


alter table "public"."category" enable row level security;

create table "public"."category_employee" (
    "created_at" timestamp with time zone not null default now(),
    "category_id" uuid,
    "emplyee_id" uuid,
    "id" uuid not null default gen_random_uuid()
);


alter table "public"."category_employee" enable row level security;

create table "public"."cities" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "province_id" bigint not null,
    "name" text not null
);


alter table "public"."cities" enable row level security;

create table "public"."companies_employees" (
    "employee_id" uuid not null,
    "id" uuid not null default gen_random_uuid(),
    "company_id" uuid
);


alter table "public"."companies_employees" enable row level security;

create table "public"."company" (
    "id" uuid not null default uuid_generate_v4(),
    "company_name" character varying(255) not null,
    "description" text not null,
    "website" character varying(255),
    "contact_email" character varying(255) not null,
    "contact_phone" character varying(20) not null,
    "address" character varying(255) not null,
    "city" bigint not null,
    "country" character varying(100) not null,
    "industry" text not null,
    "company_logo" text,
    "is_active" boolean not null default true,
    "company_cuit" text not null,
    "province_id" bigint,
    "owner_id" uuid,
    "by_defect" boolean default false
);


alter table "public"."company" enable row level security;

create table "public"."contacts" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "contact_name" text,
    "constact_email" text,
    "contact_phone" bigint,
    "contact_charge" text,
    "company_id" uuid,
    "customer_id" uuid,
    "is_active" boolean default true,
    "reason_for_termination" text,
    "termination_date" date
);


alter table "public"."contacts" enable row level security;

create table "public"."contractor_employee" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "employee_id" uuid,
    "contractor_id" uuid
);


alter table "public"."contractor_employee" enable row level security;

create table "public"."contractor_equipment" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "equipment_id" uuid,
    "contractor_id" uuid
);


alter table "public"."contractor_equipment" enable row level security;

create table "public"."contractors" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "name" text not null
);


alter table "public"."contractors" enable row level security;

create table "public"."countries" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "name" text not null
);


alter table "public"."countries" enable row level security;

create table "public"."covenant" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "name" text,
    "company_id" uuid not null,
    "is_active" boolean default true,
    "guild_id" uuid not null
);


alter table "public"."covenant" enable row level security;

create table "public"."custom_form" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "company_id" uuid not null,
    "form" jsonb not null,
    "name" text not null
);


create table "public"."customer_services" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "customer_id" uuid,
    "service_name" text,
    "service_validity" date,
    "company_id" uuid,
    "is_active" boolean default true,
    "service_start" date
);


alter table "public"."customer_services" enable row level security;

create table "public"."customers" (
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "cuit" bigint not null,
    "client_email" text,
    "client_phone" bigint,
    "address" text,
    "id" uuid not null default gen_random_uuid(),
    "is_active" boolean default true,
    "company_id" uuid not null,
    "reason_for_termination" text,
    "termination_date" date
);


alter table "public"."customers" enable row level security;

create table "public"."dailyreport" (
    "id" uuid not null default gen_random_uuid(),
    "creation_date" date default CURRENT_DATE,
    "date" date not null,
    "created_at" timestamp without time zone default CURRENT_TIMESTAMP,
    "updated_at" timestamp without time zone default CURRENT_TIMESTAMP,
    "company_id" uuid not null,
    "status" boolean default true,
    "is_active" boolean default true
);


alter table "public"."dailyreport" enable row level security;

create table "public"."dailyreportemployeerelations" (
    "id" uuid not null default gen_random_uuid(),
    "daily_report_row_id" uuid,
    "employee_id" uuid,
    "created_at" timestamp without time zone default CURRENT_TIMESTAMP
);


alter table "public"."dailyreportemployeerelations" enable row level security;

create table "public"."dailyreportequipmentrelations" (
    "id" uuid not null default gen_random_uuid(),
    "daily_report_row_id" uuid,
    "equipment_id" uuid,
    "created_at" timestamp without time zone default CURRENT_TIMESTAMP
);


alter table "public"."dailyreportequipmentrelations" enable row level security;

create table "public"."dailyreportrows" (
    "id" uuid not null default gen_random_uuid(),
    "daily_report_id" uuid,
    "customer_id" uuid,
    "service_id" uuid,
    "item_id" uuid,
    "start_time" time without time zone,
    "end_time" time without time zone,
    "description" text,
    "created_at" timestamp without time zone default CURRENT_TIMESTAMP,
    "updated_at" timestamp without time zone default CURRENT_TIMESTAMP,
    "status" daily_report_status not null default 'pendiente'::daily_report_status,
    "working_day" text,
    "document_path" text
);


alter table "public"."dailyreportrows" enable row level security;

create table "public"."diagram_type" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "name" text,
    "company_id" uuid not null default gen_random_uuid(),
    "color" text not null,
    "short_description" text not null,
    "work_active" boolean default false
);


alter table "public"."diagram_type" enable row level security;

create table "public"."diagrams_logs" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "prev_date" timestamp with time zone not null,
    "description" text not null,
    "state" text not null,
    "prev_state" text not null,
    "modified_by" uuid default auth.uid(),
    "employee_id" uuid not null,
    "diagram_id" uuid not null
);


alter table "public"."diagrams_logs" enable row level security;

create table "public"."document_types" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "applies" document_applies not null,
    "multiresource" boolean not null,
    "mandatory" boolean not null,
    "explired" boolean not null,
    "special" boolean not null,
    "is_active" boolean not null default true,
    "description" text,
    "company_id" uuid,
    "is_it_montlhy" boolean,
    "private" boolean,
    "down_document" boolean,
    "conditions" jsonb[] default '{}'::jsonb[]
);


alter table "public"."document_types" enable row level security;

create table "public"."documents_company" (
    "created_at" timestamp with time zone not null default now(),
    "id_document_types" uuid,
    "validity" text,
    "state" state not null default 'pendiente'::state,
    "is_active" boolean default true,
    "id" uuid not null default gen_random_uuid(),
    "user_id" uuid,
    "applies" uuid not null,
    "deny_reason" text,
    "document_path" text,
    "period" text
);


alter table "public"."documents_company" enable row level security;

create table "public"."documents_employees" (
    "created_at" timestamp with time zone not null default now(),
    "id_document_types" uuid,
    "validity" timestamp with time zone,
    "state" state not null default 'pendiente'::state,
    "is_active" boolean default true,
    "id" uuid not null default gen_random_uuid(),
    "user_id" uuid,
    "applies" uuid,
    "deny_reason" text,
    "document_path" text,
    "period" text
);


alter table "public"."documents_employees" enable row level security;

create table "public"."documents_employees_logs" (
    "id" integer not null default nextval('documents_employees_logs_id_seq'::regclass),
    "documents_employees_id" uuid not null,
    "modified_by" uuid not null,
    "updated_at" timestamp with time zone not null default now()
);


create table "public"."documents_equipment" (
    "created_at" timestamp with time zone not null default now(),
    "id_document_types" uuid,
    "applies" uuid,
    "validity" timestamp with time zone,
    "state" state default 'pendiente'::state,
    "is_active" boolean default true,
    "id" uuid not null default gen_random_uuid(),
    "user_id" uuid,
    "deny_reason" text,
    "document_path" text,
    "period" text
);


alter table "public"."documents_equipment" enable row level security;

create table "public"."documents_equipment_logs" (
    "id" integer not null default nextval('documents_employees_logs_id_seq'::regclass),
    "documents_equipment_id" uuid not null,
    "modified_by" uuid not null,
    "updated_at" timestamp with time zone not null default now()
);


create table "public"."employees" (
    "created_at" timestamp with time zone not null default now(),
    "picture" text not null,
    "nationality" nationality_enum not null,
    "lastname" text not null,
    "firstname" text not null,
    "cuil" text not null,
    "document_type" document_type_enum not null,
    "document_number" text not null,
    "birthplace" uuid not null,
    "gender" gender_enum,
    "marital_status" marital_status_enum,
    "level_of_education" level_of_education_enum,
    "street" text not null,
    "street_number" text not null,
    "province" bigint not null,
    "postal_code" text,
    "phone" text not null,
    "email" text,
    "file" text not null,
    "normal_hours" text,
    "date_of_admission" date not null,
    "affiliate_status" affiliate_status_enum,
    "company_position" text,
    "city" bigint not null,
    "hierarchical_position" uuid,
    "workflow_diagram" uuid,
    "type_of_contract" type_of_contract_enum not null,
    "id" uuid not null default gen_random_uuid(),
    "allocated_to" uuid[],
    "company_id" uuid,
    "is_active" boolean default true,
    "reason_for_termination" reason_for_termination_enum,
    "termination_date" date,
    "status" status_type default 'Incompleto'::status_type,
    "category_id" uuid,
    "covenants_id" uuid,
    "guild_id" uuid,
    "born_date" date
);


alter table "public"."employees" enable row level security;

create table "public"."employees_diagram" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "employee_id" uuid not null default gen_random_uuid(),
    "diagram_type" uuid not null default gen_random_uuid(),
    "day" numeric not null,
    "month" numeric not null,
    "year" numeric not null
);


alter table "public"."employees_diagram" enable row level security;

create table "public"."form_answers" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "form_id" uuid not null,
    "answer" json not null
);


alter table "public"."form_answers" enable row level security;

create table "public"."guild" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "name" text,
    "company_id" uuid,
    "is_active" boolean not null default true
);


alter table "public"."guild" enable row level security;

create table "public"."handle_errors" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "menssage" text not null,
    "path" text not null
);


alter table "public"."handle_errors" enable row level security;

create table "public"."hierarchy" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "is_active" boolean default true
);


alter table "public"."hierarchy" enable row level security;

create table "public"."hired_modules" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "company_id" uuid,
    "module_id" uuid,
    "due_to" date default (CURRENT_DATE + '1 mon'::interval)
);


alter table "public"."hired_modules" enable row level security;

create table "public"."industry_type" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text,
    "is_active" boolean default true
);


alter table "public"."industry_type" enable row level security;

create table "public"."measure_units" (
    "id" integer not null default nextval('measure_units_id_seq'::regclass),
    "unit" character varying(50) not null,
    "simbol" character varying(10) not null,
    "tipo" character varying(20) not null
);


alter table "public"."measure_units" enable row level security;

create table "public"."model_vehicles" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text,
    "brand" bigint,
    "is_active" boolean default true
);


alter table "public"."model_vehicles" enable row level security;

create table "public"."modules" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "price" numeric not null,
    "description" text not null
);


alter table "public"."modules" enable row level security;

create table "public"."notifications" (
    "id" uuid not null default gen_random_uuid(),
    "title" text,
    "description" text,
    "category" notification_categories,
    "company_id" uuid,
    "created_at" timestamp with time zone default now(),
    "document_id" uuid,
    "reference" text
);


alter table "public"."notifications" enable row level security;

create table "public"."profile" (
    "id" uuid not null,
    "created_at" timestamp with time zone default now(),
    "credential_id" uuid,
    "email" text,
    "avatar" text,
    "fullname" text,
    "role" text default 'User'::text,
    "modulos" modulos[]
);


alter table "public"."profile" enable row level security;

create table "public"."provinces" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null
);


alter table "public"."provinces" enable row level security;

create table "public"."repair_solicitudes" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "reparation_type" uuid not null,
    "equipment_id" uuid not null,
    "state" repair_state not null,
    "user_description" text,
    "mechanic_description" text,
    "end_date" date,
    "user_id" uuid,
    "mechanic_id" uuid,
    "mechanic_images" text[],
    "user_images" text[],
    "employee_id" uuid,
    "kilometer" text,
    "scheduled" timestamp with time zone
);


alter table "public"."repair_solicitudes" enable row level security;

create table "public"."repairlogs" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "title" text,
    "description" text,
    "repair_id" uuid,
    "kilometer" text,
    "modified_by_employee" uuid,
    "modified_by_user" uuid
);


alter table "public"."repairlogs" enable row level security;

create table "public"."roles" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "is_active" boolean default true,
    "intern" boolean default false
);


alter table "public"."roles" enable row level security;

create table "public"."service_items" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "customer_service_id" uuid not null,
    "company_id" uuid not null,
    "item_name" text not null,
    "item_description" text not null,
    "item_price" numeric not null,
    "item_measure_units" integer not null,
    "is_active" boolean default true
);


alter table "public"."service_items" enable row level security;

create table "public"."share_company_users" (
    "created_at" timestamp with time zone not null default now(),
    "profile_id" uuid default gen_random_uuid(),
    "company_id" uuid default gen_random_uuid(),
    "id" uuid not null default gen_random_uuid(),
    "role" text,
    "customer_id" uuid,
    "modules" modulos[]
);


alter table "public"."share_company_users" enable row level security;

create table "public"."storage_migrations" (
    "id" uuid not null default gen_random_uuid(),
    "document_id" uuid not null,
    "old_path" text not null,
    "new_path" text not null,
    "status" text default 'pending'::text,
    "created_at" timestamp with time zone default now(),
    "executed_at" timestamp with time zone,
    "error_message" text
);


create table "public"."type" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "is_active" boolean default true,
    "company_id" uuid
);


alter table "public"."type" enable row level security;

create table "public"."types_of_repairs" (
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "description" text not null,
    "criticity" text,
    "is_active" boolean not null default true,
    "company_id" uuid,
    "type_of_maintenance" "type_of_maintenance_ENUM",
    "id" uuid not null default gen_random_uuid(),
    "multi_equipment" boolean not null default false,
    "qr_close" boolean not null default false
);


alter table "public"."types_of_repairs" enable row level security;

create table "public"."types_of_vehicles" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text,
    "is_active" boolean default true
);


alter table "public"."types_of_vehicles" enable row level security;

create table "public"."vehicles" (
    "created_at" timestamp with time zone not null default now(),
    "picture" text not null,
    "type_of_vehicle" bigint not null,
    "domain" text,
    "chassis" text,
    "engine" text not null,
    "serie" text,
    "intern_number" text not null,
    "year" text not null,
    "brand" bigint not null,
    "model" bigint not null,
    "is_active" boolean default true,
    "termination_date" date,
    "reason_for_termination" text,
    "user_id" uuid default auth.uid(),
    "company_id" uuid,
    "id" uuid not null default gen_random_uuid(),
    "type" uuid not null,
    "status" status_type default 'Incompleto'::status_type,
    "allocated_to" uuid[],
    "condition" condition_enum default 'operativo'::condition_enum,
    "kilometer" text default '0'::text
);


alter table "public"."vehicles" enable row level security;

create table "public"."work-diagram" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "is_active" boolean default true
);


alter table "public"."work-diagram" enable row level security;

alter sequence "public"."documents_employees_logs_id_seq" owned by "public"."documents_employees_logs"."id";

alter sequence "public"."measure_units_id_seq" owned by "public"."measure_units"."id";

CREATE UNIQUE INDEX assing_customer_pkey ON public.assing_customer USING btree (id);

CREATE UNIQUE INDEX brand_vehicles_name_key ON public.brand_vehicles USING btree (name);

CREATE UNIQUE INDEX brand_vehicles_pkey ON public.brand_vehicles USING btree (id);

CREATE UNIQUE INDEX category_employee_created_at_key ON public.category_employee USING btree (created_at);

CREATE UNIQUE INDEX category_employee_pkey ON public.category_employee USING btree (id);

CREATE UNIQUE INDEX category_pkey ON public.category USING btree (id);

CREATE INDEX cities_province_id_idx ON public.cities USING btree (province_id);

CREATE UNIQUE INDEX citys_pkey ON public.cities USING btree (id);

CREATE INDEX companies_employees_company_id_idx ON public.companies_employees USING btree (company_id);

CREATE UNIQUE INDEX companies_employees_cuil_key ON public.employees USING btree (cuil);

CREATE UNIQUE INDEX companies_employees_document_number_key ON public.employees USING btree (document_number);

CREATE INDEX companies_employees_employee_id_idx ON public.companies_employees USING btree (employee_id);

CREATE UNIQUE INDEX companies_employees_pkey ON public.employees USING btree (id);

CREATE UNIQUE INDEX companies_employees_pkey1 ON public.companies_employees USING btree (id);

CREATE UNIQUE INDEX companies_pkey ON public.company USING btree (id);

CREATE UNIQUE INDEX company_compay_cuit_key ON public.company USING btree (company_cuit);

CREATE UNIQUE INDEX contacts_pkey ON public.contacts USING btree (id);

CREATE UNIQUE INDEX "contractor-companies_pkey" ON public.contractors USING btree (id);

CREATE UNIQUE INDEX contractor_employee_pkey ON public.contractor_employee USING btree (id);

CREATE UNIQUE INDEX contractor_equipment_employee_id_contractor_id_key ON public.contractor_equipment USING btree (equipment_id, contractor_id);

CREATE UNIQUE INDEX contractor_equipment_pkey ON public.contractor_equipment USING btree (id);

CREATE UNIQUE INDEX countries_pkey ON public.countries USING btree (id);

CREATE UNIQUE INDEX covenant_pkey ON public.covenant USING btree (id);

CREATE UNIQUE INDEX custom_form_pkey ON public.custom_form USING btree (id);

CREATE UNIQUE INDEX customer_services_pkey ON public.customer_services USING btree (id);

CREATE UNIQUE INDEX customers_pkey ON public.customers USING btree (id);

CREATE UNIQUE INDEX dailyreport_pkey ON public.dailyreport USING btree (id);

CREATE UNIQUE INDEX dailyreportemployeerelations_pkey ON public.dailyreportemployeerelations USING btree (id);

CREATE UNIQUE INDEX dailyreportequipmentrelations_pkey ON public.dailyreportequipmentrelations USING btree (id);

CREATE UNIQUE INDEX dailyreportrows_pkey ON public.dailyreportrows USING btree (id);

CREATE UNIQUE INDEX diagram_type_pkey ON public.diagram_type USING btree (id);

CREATE UNIQUE INDEX diagrams_logs_pkey ON public.diagrams_logs USING btree (id);

CREATE UNIQUE INDEX document_types_pkey ON public.document_types USING btree (id);

CREATE UNIQUE INDEX documents_company_document_path_key ON public.documents_company USING btree (document_path);

CREATE UNIQUE INDEX documents_company_pkey ON public.documents_company USING btree (id);

CREATE UNIQUE INDEX documents_employees_logs_pkey ON public.documents_employees_logs USING btree (id);

CREATE UNIQUE INDEX documents_equipment_logs_pkey ON public.documents_equipment_logs USING btree (id);

CREATE UNIQUE INDEX documents_equipment_pkey ON public.documents_equipment USING btree (id);

CREATE UNIQUE INDEX documents_pkey ON public.documents_employees USING btree (id);

CREATE UNIQUE INDEX employees_diagram_pkey ON public.employees_diagram USING btree (id);

CREATE UNIQUE INDEX form_answers_pkey ON public.form_answers USING btree (id);

CREATE UNIQUE INDEX guild_pkey ON public.guild USING btree (id);

CREATE UNIQUE INDEX handle_errors_pkey ON public.handle_errors USING btree (id);

CREATE UNIQUE INDEX hierarchy_pkey ON public.hierarchy USING btree (id);

CREATE UNIQUE INDEX hired_modules_pkey ON public.hired_modules USING btree (id);

CREATE UNIQUE INDEX industry_type_pkey ON public.industry_type USING btree (id);

CREATE UNIQUE INDEX industry_type_type_key ON public.industry_type USING btree (name);

CREATE UNIQUE INDEX measure_units_pkey ON public.measure_units USING btree (id);

CREATE UNIQUE INDEX model_vehicles_pkey ON public.model_vehicles USING btree (id);

CREATE UNIQUE INDEX modules_pkey ON public.modules USING btree (id);

CREATE UNIQUE INDEX notifications_pkey ON public.notifications USING btree (id);

CREATE UNIQUE INDEX "profile_credentialId_key" ON public.profile USING btree (credential_id);

CREATE UNIQUE INDEX profile_email_key ON public.profile USING btree (email);

CREATE UNIQUE INDEX profile_pkey ON public.profile USING btree (id);

CREATE UNIQUE INDEX provinces_id_key ON public.provinces USING btree (id);

CREATE UNIQUE INDEX provinces_pkey ON public.provinces USING btree (id);

CREATE UNIQUE INDEX repair_solicitudes_pkey ON public.repair_solicitudes USING btree (id);

CREATE UNIQUE INDEX reparirlogs_pkey ON public.repairlogs USING btree (id);

CREATE UNIQUE INDEX roles_name_key ON public.roles USING btree (name);

CREATE UNIQUE INDEX roles_pkey ON public.roles USING btree (id);

CREATE UNIQUE INDEX service_items_pkey ON public.service_items USING btree (id);

CREATE UNIQUE INDEX share_company_users_id2_key ON public.share_company_users USING btree (id);

CREATE UNIQUE INDEX share_company_users_pkey ON public.share_company_users USING btree (id);

CREATE UNIQUE INDEX storage_migrations_pkey ON public.storage_migrations USING btree (id);

CREATE UNIQUE INDEX type_pkey ON public.type USING btree (id);

CREATE UNIQUE INDEX "types_of_repairs_id-2_key" ON public.types_of_repairs USING btree (id);

CREATE UNIQUE INDEX types_of_repairs_pkey ON public.types_of_repairs USING btree (id);

CREATE UNIQUE INDEX types_of_vehicles_pkey ON public.types_of_vehicles USING btree (id);

CREATE UNIQUE INDEX unique_contractor_employee ON public.contractor_employee USING btree (employee_id, contractor_id);

CREATE UNIQUE INDEX vehicles_domain_key ON public.vehicles USING btree (domain);

CREATE UNIQUE INDEX vehicles_id2_key ON public.vehicles USING btree (id);

CREATE UNIQUE INDEX vehicles_pkey ON public.vehicles USING btree (id);

CREATE UNIQUE INDEX "work-diagram_pkey" ON public."work-diagram" USING btree (id);

alter table "public"."assing_customer" add constraint "assing_customer_pkey" PRIMARY KEY using index "assing_customer_pkey";

alter table "public"."brand_vehicles" add constraint "brand_vehicles_pkey" PRIMARY KEY using index "brand_vehicles_pkey";

alter table "public"."category" add constraint "category_pkey" PRIMARY KEY using index "category_pkey";

alter table "public"."category_employee" add constraint "category_employee_pkey" PRIMARY KEY using index "category_employee_pkey";

alter table "public"."cities" add constraint "citys_pkey" PRIMARY KEY using index "citys_pkey";

alter table "public"."companies_employees" add constraint "companies_employees_pkey1" PRIMARY KEY using index "companies_employees_pkey1";

alter table "public"."company" add constraint "companies_pkey" PRIMARY KEY using index "companies_pkey";

alter table "public"."contacts" add constraint "contacts_pkey" PRIMARY KEY using index "contacts_pkey";

alter table "public"."contractor_employee" add constraint "contractor_employee_pkey" PRIMARY KEY using index "contractor_employee_pkey";

alter table "public"."contractor_equipment" add constraint "contractor_equipment_pkey" PRIMARY KEY using index "contractor_equipment_pkey";

alter table "public"."contractors" add constraint "contractor-companies_pkey" PRIMARY KEY using index "contractor-companies_pkey";

alter table "public"."countries" add constraint "countries_pkey" PRIMARY KEY using index "countries_pkey";

alter table "public"."covenant" add constraint "covenant_pkey" PRIMARY KEY using index "covenant_pkey";

alter table "public"."custom_form" add constraint "custom_form_pkey" PRIMARY KEY using index "custom_form_pkey";

alter table "public"."customer_services" add constraint "customer_services_pkey" PRIMARY KEY using index "customer_services_pkey";

alter table "public"."customers" add constraint "customers_pkey" PRIMARY KEY using index "customers_pkey";

alter table "public"."dailyreport" add constraint "dailyreport_pkey" PRIMARY KEY using index "dailyreport_pkey";

alter table "public"."dailyreportemployeerelations" add constraint "dailyreportemployeerelations_pkey" PRIMARY KEY using index "dailyreportemployeerelations_pkey";

alter table "public"."dailyreportequipmentrelations" add constraint "dailyreportequipmentrelations_pkey" PRIMARY KEY using index "dailyreportequipmentrelations_pkey";

alter table "public"."dailyreportrows" add constraint "dailyreportrows_pkey" PRIMARY KEY using index "dailyreportrows_pkey";

alter table "public"."diagram_type" add constraint "diagram_type_pkey" PRIMARY KEY using index "diagram_type_pkey";

alter table "public"."diagrams_logs" add constraint "diagrams_logs_pkey" PRIMARY KEY using index "diagrams_logs_pkey";

alter table "public"."document_types" add constraint "document_types_pkey" PRIMARY KEY using index "document_types_pkey";

alter table "public"."documents_company" add constraint "documents_company_pkey" PRIMARY KEY using index "documents_company_pkey";

alter table "public"."documents_employees" add constraint "documents_pkey" PRIMARY KEY using index "documents_pkey";

alter table "public"."documents_employees_logs" add constraint "documents_employees_logs_pkey" PRIMARY KEY using index "documents_employees_logs_pkey";

alter table "public"."documents_equipment" add constraint "documents_equipment_pkey" PRIMARY KEY using index "documents_equipment_pkey";

alter table "public"."documents_equipment_logs" add constraint "documents_equipment_logs_pkey" PRIMARY KEY using index "documents_equipment_logs_pkey";

alter table "public"."employees" add constraint "companies_employees_pkey" PRIMARY KEY using index "companies_employees_pkey";

alter table "public"."employees_diagram" add constraint "employees_diagram_pkey" PRIMARY KEY using index "employees_diagram_pkey";

alter table "public"."form_answers" add constraint "form_answers_pkey" PRIMARY KEY using index "form_answers_pkey";

alter table "public"."guild" add constraint "guild_pkey" PRIMARY KEY using index "guild_pkey";

alter table "public"."handle_errors" add constraint "handle_errors_pkey" PRIMARY KEY using index "handle_errors_pkey";

alter table "public"."hierarchy" add constraint "hierarchy_pkey" PRIMARY KEY using index "hierarchy_pkey";

alter table "public"."hired_modules" add constraint "hired_modules_pkey" PRIMARY KEY using index "hired_modules_pkey";

alter table "public"."industry_type" add constraint "industry_type_pkey" PRIMARY KEY using index "industry_type_pkey";

alter table "public"."measure_units" add constraint "measure_units_pkey" PRIMARY KEY using index "measure_units_pkey";

alter table "public"."model_vehicles" add constraint "model_vehicles_pkey" PRIMARY KEY using index "model_vehicles_pkey";

alter table "public"."modules" add constraint "modules_pkey" PRIMARY KEY using index "modules_pkey";

alter table "public"."notifications" add constraint "notifications_pkey" PRIMARY KEY using index "notifications_pkey";

alter table "public"."profile" add constraint "profile_pkey" PRIMARY KEY using index "profile_pkey";

alter table "public"."provinces" add constraint "provinces_pkey" PRIMARY KEY using index "provinces_pkey";

alter table "public"."repair_solicitudes" add constraint "repair_solicitudes_pkey" PRIMARY KEY using index "repair_solicitudes_pkey";

alter table "public"."repairlogs" add constraint "reparirlogs_pkey" PRIMARY KEY using index "reparirlogs_pkey";

alter table "public"."roles" add constraint "roles_pkey" PRIMARY KEY using index "roles_pkey";

alter table "public"."service_items" add constraint "service_items_pkey" PRIMARY KEY using index "service_items_pkey";

alter table "public"."share_company_users" add constraint "share_company_users_pkey" PRIMARY KEY using index "share_company_users_pkey";

alter table "public"."storage_migrations" add constraint "storage_migrations_pkey" PRIMARY KEY using index "storage_migrations_pkey";

alter table "public"."type" add constraint "type_pkey" PRIMARY KEY using index "type_pkey";

alter table "public"."types_of_repairs" add constraint "types_of_repairs_pkey" PRIMARY KEY using index "types_of_repairs_pkey";

alter table "public"."types_of_vehicles" add constraint "types_of_vehicles_pkey" PRIMARY KEY using index "types_of_vehicles_pkey";

alter table "public"."vehicles" add constraint "vehicles_pkey" PRIMARY KEY using index "vehicles_pkey";

alter table "public"."work-diagram" add constraint "work-diagram_pkey" PRIMARY KEY using index "work-diagram_pkey";

alter table "public"."assing_customer" add constraint "public_assing_customer_employee_id_fkey" FOREIGN KEY (employee_id) REFERENCES employees(id) not valid;

alter table "public"."assing_customer" validate constraint "public_assing_customer_employee_id_fkey";

alter table "public"."assing_customer" add constraint "public_assing_customer_equipment_id_fkey" FOREIGN KEY (equipment_id) REFERENCES vehicles(id) not valid;

alter table "public"."assing_customer" validate constraint "public_assing_customer_equipment_id_fkey";

alter table "public"."brand_vehicles" add constraint "brand_vehicles_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."brand_vehicles" validate constraint "brand_vehicles_company_id_fkey";

alter table "public"."brand_vehicles" add constraint "brand_vehicles_name_key" UNIQUE using index "brand_vehicles_name_key";

alter table "public"."category" add constraint "category_covenant_id_fkey" FOREIGN KEY (covenant_id) REFERENCES covenant(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."category" validate constraint "category_covenant_id_fkey";

alter table "public"."category_employee" add constraint "category_employee_created_at_key" UNIQUE using index "category_employee_created_at_key";

alter table "public"."category_employee" add constraint "public_covenant_category_category_id_fkey" FOREIGN KEY (category_id) REFERENCES category(id) not valid;

alter table "public"."category_employee" validate constraint "public_covenant_category_category_id_fkey";

alter table "public"."category_employee" add constraint "public_covenant_employee_emplyee_id_fkey" FOREIGN KEY (emplyee_id) REFERENCES employees(id) not valid;

alter table "public"."category_employee" validate constraint "public_covenant_employee_emplyee_id_fkey";

alter table "public"."cities" add constraint "cities_province_id_fkey" FOREIGN KEY (province_id) REFERENCES provinces(id) ON UPDATE CASCADE not valid;

alter table "public"."cities" validate constraint "cities_province_id_fkey";

alter table "public"."companies_employees" add constraint "companies_employees_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."companies_employees" validate constraint "companies_employees_company_id_fkey";

alter table "public"."companies_employees" add constraint "companies_employees_employee_id_fkey" FOREIGN KEY (employee_id) REFERENCES employees(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."companies_employees" validate constraint "companies_employees_employee_id_fkey";

alter table "public"."company" add constraint "company_city_fkey" FOREIGN KEY (city) REFERENCES cities(id) not valid;

alter table "public"."company" validate constraint "company_city_fkey";

alter table "public"."company" add constraint "company_compay_cuit_key" UNIQUE using index "company_compay_cuit_key";

alter table "public"."company" add constraint "company_owner_id_fkey" FOREIGN KEY (owner_id) REFERENCES profile(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."company" validate constraint "company_owner_id_fkey";

alter table "public"."company" add constraint "company_province_id_fkey" FOREIGN KEY (province_id) REFERENCES provinces(id) not valid;

alter table "public"."company" validate constraint "company_province_id_fkey";

alter table "public"."contacts" add constraint "public_contacts_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) not valid;

alter table "public"."contacts" validate constraint "public_contacts_company_id_fkey";

alter table "public"."contacts" add constraint "public_contacts_customer_id_fkey" FOREIGN KEY (customer_id) REFERENCES customers(id) not valid;

alter table "public"."contacts" validate constraint "public_contacts_customer_id_fkey";

alter table "public"."contractor_employee" add constraint "contractor_employee_contractor_id_fkey" FOREIGN KEY (contractor_id) REFERENCES customers(id) not valid;

alter table "public"."contractor_employee" validate constraint "contractor_employee_contractor_id_fkey";

alter table "public"."contractor_employee" add constraint "contractor_employee_employee_id_fkey" FOREIGN KEY (employee_id) REFERENCES employees(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."contractor_employee" validate constraint "contractor_employee_employee_id_fkey";

alter table "public"."contractor_employee" add constraint "unique_contractor_employee" UNIQUE using index "unique_contractor_employee";

alter table "public"."contractor_equipment" add constraint "contractor_equipment_contractor_id_fkey" FOREIGN KEY (contractor_id) REFERENCES customers(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."contractor_equipment" validate constraint "contractor_equipment_contractor_id_fkey";

alter table "public"."contractor_equipment" add constraint "contractor_equipment_employee_id_contractor_id_key" UNIQUE using index "contractor_equipment_employee_id_contractor_id_key";

alter table "public"."contractor_equipment" add constraint "contractor_equipment_equipment_id_fkey" FOREIGN KEY (equipment_id) REFERENCES vehicles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."contractor_equipment" validate constraint "contractor_equipment_equipment_id_fkey";

alter table "public"."covenant" add constraint "covenant_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."covenant" validate constraint "covenant_company_id_fkey";

alter table "public"."covenant" add constraint "covenant_guild_id_fkey" FOREIGN KEY (guild_id) REFERENCES guild(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."covenant" validate constraint "covenant_guild_id_fkey";

alter table "public"."custom_form" add constraint "custom_form_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."custom_form" validate constraint "custom_form_company_id_fkey";

alter table "public"."customer_services" add constraint "public_customer_services_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) not valid;

alter table "public"."customer_services" validate constraint "public_customer_services_company_id_fkey";

alter table "public"."customer_services" add constraint "public_customer_services_customer_id_fkey" FOREIGN KEY (customer_id) REFERENCES customers(id) not valid;

alter table "public"."customer_services" validate constraint "public_customer_services_customer_id_fkey";

alter table "public"."customers" add constraint "customers_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."customers" validate constraint "customers_company_id_fkey";

alter table "public"."dailyreport" add constraint "public_dailyreport_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) not valid;

alter table "public"."dailyreport" validate constraint "public_dailyreport_company_id_fkey";

alter table "public"."dailyreportemployeerelations" add constraint "dailyreportemployeerelations_daily_report_row_id_fkey" FOREIGN KEY (daily_report_row_id) REFERENCES dailyreportrows(id) ON DELETE CASCADE not valid;

alter table "public"."dailyreportemployeerelations" validate constraint "dailyreportemployeerelations_daily_report_row_id_fkey";

alter table "public"."dailyreportemployeerelations" add constraint "dailyreportemployeerelations_employee_id_fkey" FOREIGN KEY (employee_id) REFERENCES employees(id) ON DELETE CASCADE not valid;

alter table "public"."dailyreportemployeerelations" validate constraint "dailyreportemployeerelations_employee_id_fkey";

alter table "public"."dailyreportequipmentrelations" add constraint "dailyreportequipmentrelations_daily_report_row_id_fkey" FOREIGN KEY (daily_report_row_id) REFERENCES dailyreportrows(id) ON DELETE CASCADE not valid;

alter table "public"."dailyreportequipmentrelations" validate constraint "dailyreportequipmentrelations_daily_report_row_id_fkey";

alter table "public"."dailyreportequipmentrelations" add constraint "dailyreportequipmentrelations_equipment_id_fkey" FOREIGN KEY (equipment_id) REFERENCES vehicles(id) ON DELETE CASCADE not valid;

alter table "public"."dailyreportequipmentrelations" validate constraint "dailyreportequipmentrelations_equipment_id_fkey";

alter table "public"."dailyreportrows" add constraint "dailyreportrows_daily_report_id_fkey" FOREIGN KEY (daily_report_id) REFERENCES dailyreport(id) ON DELETE CASCADE not valid;

alter table "public"."dailyreportrows" validate constraint "dailyreportrows_daily_report_id_fkey";

alter table "public"."dailyreportrows" add constraint "public_dailyreportrows_customer_id_fkey" FOREIGN KEY (customer_id) REFERENCES customers(id) not valid;

alter table "public"."dailyreportrows" validate constraint "public_dailyreportrows_customer_id_fkey";

alter table "public"."dailyreportrows" add constraint "public_dailyreportrows_item_id_fkey" FOREIGN KEY (item_id) REFERENCES service_items(id) not valid;

alter table "public"."dailyreportrows" validate constraint "public_dailyreportrows_item_id_fkey";

alter table "public"."dailyreportrows" add constraint "public_dailyreportrows_service_id_fkey" FOREIGN KEY (service_id) REFERENCES customer_services(id) not valid;

alter table "public"."dailyreportrows" validate constraint "public_dailyreportrows_service_id_fkey";

alter table "public"."diagram_type" add constraint "public_diagram_type_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) not valid;

alter table "public"."diagram_type" validate constraint "public_diagram_type_company_id_fkey";

alter table "public"."diagrams_logs" add constraint "diagrams_logs_diagram_id_fkey" FOREIGN KEY (diagram_id) REFERENCES diagram_type(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."diagrams_logs" validate constraint "diagrams_logs_diagram_id_fkey";

alter table "public"."diagrams_logs" add constraint "diagrams_logs_employee_id_fkey" FOREIGN KEY (employee_id) REFERENCES employees(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."diagrams_logs" validate constraint "diagrams_logs_employee_id_fkey";

alter table "public"."diagrams_logs" add constraint "diagrams_logs_modified_by_fkey" FOREIGN KEY (modified_by) REFERENCES profile(id) ON DELETE SET NULL not valid;

alter table "public"."diagrams_logs" validate constraint "diagrams_logs_modified_by_fkey";

alter table "public"."document_types" add constraint "document_types_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."document_types" validate constraint "document_types_company_id_fkey";

alter table "public"."documents_company" add constraint "documents_company_applies_fkey" FOREIGN KEY (applies) REFERENCES company(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."documents_company" validate constraint "documents_company_applies_fkey";

alter table "public"."documents_company" add constraint "documents_company_document_path_key" UNIQUE using index "documents_company_document_path_key";

alter table "public"."documents_company" add constraint "documents_company_id_document_types_fkey" FOREIGN KEY (id_document_types) REFERENCES document_types(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."documents_company" validate constraint "documents_company_id_document_types_fkey";

alter table "public"."documents_company" add constraint "documents_company_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profile(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."documents_company" validate constraint "documents_company_user_id_fkey";

alter table "public"."documents_employees" add constraint "documents_employees_applies_fkey" FOREIGN KEY (applies) REFERENCES employees(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."documents_employees" validate constraint "documents_employees_applies_fkey";

alter table "public"."documents_employees" add constraint "documents_employees_id_document_types_fkey" FOREIGN KEY (id_document_types) REFERENCES document_types(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."documents_employees" validate constraint "documents_employees_id_document_types_fkey";

alter table "public"."documents_employees" add constraint "documents_employees_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profile(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."documents_employees" validate constraint "documents_employees_user_id_fkey";

alter table "public"."documents_employees_logs" add constraint "public_documents_employees_logs_documents_employees_id_fkey" FOREIGN KEY (documents_employees_id) REFERENCES documents_employees(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."documents_employees_logs" validate constraint "public_documents_employees_logs_documents_employees_id_fkey";

alter table "public"."documents_equipment" add constraint "documents_equipment_applies_fkey" FOREIGN KEY (applies) REFERENCES vehicles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."documents_equipment" validate constraint "documents_equipment_applies_fkey";

alter table "public"."documents_equipment" add constraint "documents_equipment_id_document_types_fkey" FOREIGN KEY (id_document_types) REFERENCES document_types(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."documents_equipment" validate constraint "documents_equipment_id_document_types_fkey";

alter table "public"."documents_equipment" add constraint "documents_equipment_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profile(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."documents_equipment" validate constraint "documents_equipment_user_id_fkey";

alter table "public"."documents_equipment_logs" add constraint "public_documents_equipment_logs_documents_equipment_id_fkey" FOREIGN KEY (documents_equipment_id) REFERENCES documents_equipment(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."documents_equipment_logs" validate constraint "public_documents_equipment_logs_documents_equipment_id_fkey";

alter table "public"."employees" add constraint "companies_employees_cuil_key" UNIQUE using index "companies_employees_cuil_key";

alter table "public"."employees" add constraint "companies_employees_document_number_key" UNIQUE using index "companies_employees_document_number_key";

alter table "public"."employees" add constraint "employees_birthplace_fkey" FOREIGN KEY (birthplace) REFERENCES countries(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."employees" validate constraint "employees_birthplace_fkey";

alter table "public"."employees" add constraint "employees_category_id_fkey" FOREIGN KEY (category_id) REFERENCES category(id) not valid;

alter table "public"."employees" validate constraint "employees_category_id_fkey";

alter table "public"."employees" add constraint "employees_city_fkey" FOREIGN KEY (city) REFERENCES cities(id) not valid;

alter table "public"."employees" validate constraint "employees_city_fkey";

alter table "public"."employees" add constraint "employees_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."employees" validate constraint "employees_company_id_fkey";

alter table "public"."employees" add constraint "employees_covenants_id_fkey" FOREIGN KEY (covenants_id) REFERENCES covenant(id) not valid;

alter table "public"."employees" validate constraint "employees_covenants_id_fkey";

alter table "public"."employees" add constraint "employees_guild_id_fkey" FOREIGN KEY (guild_id) REFERENCES guild(id) not valid;

alter table "public"."employees" validate constraint "employees_guild_id_fkey";

alter table "public"."employees" add constraint "employees_hierarchical_position_fkey" FOREIGN KEY (hierarchical_position) REFERENCES hierarchy(id) not valid;

alter table "public"."employees" validate constraint "employees_hierarchical_position_fkey";

alter table "public"."employees" add constraint "employees_province_fkey" FOREIGN KEY (province) REFERENCES provinces(id) not valid;

alter table "public"."employees" validate constraint "employees_province_fkey";

alter table "public"."employees" add constraint "employees_workflow_diagram_fkey" FOREIGN KEY (workflow_diagram) REFERENCES "work-diagram"(id) not valid;

alter table "public"."employees" validate constraint "employees_workflow_diagram_fkey";

alter table "public"."employees_diagram" add constraint "public_employees_diagram_diagram_type_fkey" FOREIGN KEY (diagram_type) REFERENCES diagram_type(id) not valid;

alter table "public"."employees_diagram" validate constraint "public_employees_diagram_diagram_type_fkey";

alter table "public"."employees_diagram" add constraint "public_employees_diagram_employee_id_fkey" FOREIGN KEY (employee_id) REFERENCES employees(id) not valid;

alter table "public"."employees_diagram" validate constraint "public_employees_diagram_employee_id_fkey";

alter table "public"."form_answers" add constraint "form_answers_form_id_fkey" FOREIGN KEY (form_id) REFERENCES custom_form(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."form_answers" validate constraint "form_answers_form_id_fkey";

alter table "public"."guild" add constraint "public_guild_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) not valid;

alter table "public"."guild" validate constraint "public_guild_company_id_fkey";

alter table "public"."hired_modules" add constraint "hired_modules_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."hired_modules" validate constraint "hired_modules_company_id_fkey";

alter table "public"."hired_modules" add constraint "hired_modules_module_id_fkey" FOREIGN KEY (module_id) REFERENCES modules(id) ON UPDATE CASCADE ON DELETE RESTRICT not valid;

alter table "public"."hired_modules" validate constraint "hired_modules_module_id_fkey";

alter table "public"."industry_type" add constraint "industry_type_type_key" UNIQUE using index "industry_type_type_key";

alter table "public"."model_vehicles" add constraint "public_model_vehicles_brand_fkey" FOREIGN KEY (brand) REFERENCES brand_vehicles(id) not valid;

alter table "public"."model_vehicles" validate constraint "public_model_vehicles_brand_fkey";

alter table "public"."notifications" add constraint "public_notifications_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."notifications" validate constraint "public_notifications_company_id_fkey";

alter table "public"."profile" add constraint "profile_credentialId_key" UNIQUE using index "profile_credentialId_key";

alter table "public"."profile" add constraint "profile_credential_id_fkey" FOREIGN KEY (credential_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."profile" validate constraint "profile_credential_id_fkey";

alter table "public"."profile" add constraint "profile_email_key" UNIQUE using index "profile_email_key";

alter table "public"."profile" add constraint "profile_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."profile" validate constraint "profile_id_fkey";

alter table "public"."profile" add constraint "profile_role_fkey" FOREIGN KEY (role) REFERENCES roles(name) not valid;

alter table "public"."profile" validate constraint "profile_role_fkey";

alter table "public"."provinces" add constraint "provinces_id_key" UNIQUE using index "provinces_id_key";

alter table "public"."repair_solicitudes" add constraint "repair_solicitudes_employee_id_fkey" FOREIGN KEY (employee_id) REFERENCES employees(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."repair_solicitudes" validate constraint "repair_solicitudes_employee_id_fkey";

alter table "public"."repair_solicitudes" add constraint "repair_solicitudes_equipment_id_fkey" FOREIGN KEY (equipment_id) REFERENCES vehicles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."repair_solicitudes" validate constraint "repair_solicitudes_equipment_id_fkey";

alter table "public"."repair_solicitudes" add constraint "repair_solicitudes_mechanic_id_fkey" FOREIGN KEY (mechanic_id) REFERENCES profile(id) ON UPDATE RESTRICT ON DELETE RESTRICT not valid;

alter table "public"."repair_solicitudes" validate constraint "repair_solicitudes_mechanic_id_fkey";

alter table "public"."repair_solicitudes" add constraint "repair_solicitudes_reparation_type_fkey" FOREIGN KEY (reparation_type) REFERENCES types_of_repairs(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."repair_solicitudes" validate constraint "repair_solicitudes_reparation_type_fkey";

alter table "public"."repair_solicitudes" add constraint "repair_solicitudes_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profile(id) not valid;

alter table "public"."repair_solicitudes" validate constraint "repair_solicitudes_user_id_fkey";

alter table "public"."repairlogs" add constraint "repairlogs_modified_by_employee_fkey" FOREIGN KEY (modified_by_employee) REFERENCES employees(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."repairlogs" validate constraint "repairlogs_modified_by_employee_fkey";

alter table "public"."repairlogs" add constraint "repairlogs_modified_by_user_fkey" FOREIGN KEY (modified_by_user) REFERENCES profile(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."repairlogs" validate constraint "repairlogs_modified_by_user_fkey";

alter table "public"."repairlogs" add constraint "reparirlogs_repair_id_fkey" FOREIGN KEY (repair_id) REFERENCES repair_solicitudes(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."repairlogs" validate constraint "reparirlogs_repair_id_fkey";

alter table "public"."roles" add constraint "roles_name_key" UNIQUE using index "roles_name_key";

alter table "public"."service_items" add constraint "public_service_items_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) not valid;

alter table "public"."service_items" validate constraint "public_service_items_company_id_fkey";

alter table "public"."service_items" add constraint "public_service_items_costumer_service_id_fkey" FOREIGN KEY (customer_service_id) REFERENCES customer_services(id) not valid;

alter table "public"."service_items" validate constraint "public_service_items_costumer_service_id_fkey";

alter table "public"."service_items" add constraint "public_service_items_item_measure_units_fkey" FOREIGN KEY (item_measure_units) REFERENCES measure_units(id) not valid;

alter table "public"."service_items" validate constraint "public_service_items_item_measure_units_fkey";

alter table "public"."share_company_users" add constraint "public_share_company_users_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."share_company_users" validate constraint "public_share_company_users_company_id_fkey";

alter table "public"."share_company_users" add constraint "public_share_company_users_profile_id_fkey" FOREIGN KEY (profile_id) REFERENCES profile(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."share_company_users" validate constraint "public_share_company_users_profile_id_fkey";

alter table "public"."share_company_users" add constraint "share_company_users_customer_id_fkey" FOREIGN KEY (customer_id) REFERENCES customers(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."share_company_users" validate constraint "share_company_users_customer_id_fkey";

alter table "public"."share_company_users" add constraint "share_company_users_id2_key" UNIQUE using index "share_company_users_id2_key";

alter table "public"."share_company_users" add constraint "share_company_users_role_fkey" FOREIGN KEY (role) REFERENCES roles(name) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."share_company_users" validate constraint "share_company_users_role_fkey";

alter table "public"."type" add constraint "type_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."type" validate constraint "type_company_id_fkey";

alter table "public"."types_of_repairs" add constraint "types_of_repairs_check" CHECK (true) not valid;

alter table "public"."types_of_repairs" validate constraint "types_of_repairs_check";

alter table "public"."types_of_repairs" add constraint "types_of_repairs_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."types_of_repairs" validate constraint "types_of_repairs_company_id_fkey";

alter table "public"."types_of_repairs" add constraint "types_of_repairs_id-2_key" UNIQUE using index "types_of_repairs_id-2_key";

alter table "public"."vehicles" add constraint "public_vehicles_model_fkey" FOREIGN KEY (model) REFERENCES model_vehicles(id) not valid;

alter table "public"."vehicles" validate constraint "public_vehicles_model_fkey";

alter table "public"."vehicles" add constraint "public_vehicles_type_fkey" FOREIGN KEY (type) REFERENCES type(id) not valid;

alter table "public"."vehicles" validate constraint "public_vehicles_type_fkey";

alter table "public"."vehicles" add constraint "vehicles_brand_fkey" FOREIGN KEY (brand) REFERENCES brand_vehicles(id) not valid;

alter table "public"."vehicles" validate constraint "vehicles_brand_fkey";

alter table "public"."vehicles" add constraint "vehicles_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."vehicles" validate constraint "vehicles_company_id_fkey";

alter table "public"."vehicles" add constraint "vehicles_domain_key" UNIQUE using index "vehicles_domain_key";

alter table "public"."vehicles" add constraint "vehicles_id2_key" UNIQUE using index "vehicles_id2_key";

alter table "public"."vehicles" add constraint "vehicles_type_of_vehicle_fkey" FOREIGN KEY (type_of_vehicle) REFERENCES types_of_vehicles(id) not valid;

alter table "public"."vehicles" validate constraint "vehicles_type_of_vehicle_fkey";

alter table "public"."vehicles" add constraint "vehicles_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profile(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."vehicles" validate constraint "vehicles_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.actualizar_estado_documentos()
 RETURNS void
 LANGUAGE plpgsql
AS $function$
BEGIN
    -- Actualizar documentos de empleados
    UPDATE documents_employees
    SET state = 'vencido'
    WHERE validity::timestamptz < CURRENT_TIMESTAMP;

    -- Actualizar documentos de equipos
    UPDATE documents_equipment
    SET state = 'vencido'
    WHERE validity::timestamptz < CURRENT_TIMESTAMP;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.add_new_document()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$DECLARE
  company_owner_id UUID;
  vehicle_id UUID;
  employee_id UUID;
BEGIN
  IF NEW.mandatory THEN
    IF NEW.applies = 'Equipos' THEN
      IF NEW.company_id IS NULL THEN
        FOR company_owner_id IN SELECT owner_id FROM company LOOP
          FOR vehicle_id IN SELECT id FROM vehicles WHERE company_id = company_owner_id LOOP
            INSERT INTO documents_equipment (id_document_types, applies, validity, state, is_active, user_id, deny_reason, document_path)
            VALUES (NEW.id, vehicle_id, NULL, 'pendiente', TRUE, company_owner_id, NULL, NULL);
          END LOOP;
        END LOOP;
        -- Actualizar el estado de todos los vehículos
        UPDATE vehicles SET status = 'Incompleto' WHERE company_id IN (SELECT owner_id FROM company);
      ELSE
        SELECT owner_id INTO company_owner_id FROM company WHERE id = NEW.company_id;
        FOR vehicle_id IN SELECT id FROM vehicles WHERE company_id = NEW.company_id LOOP
          INSERT INTO documents_equipment (id_document_types, applies, validity, state, is_active, user_id, deny_reason, document_path)
          VALUES (NEW.id, vehicle_id, NULL, 'pendiente', TRUE, company_owner_id, NULL, NULL);
        END LOOP;
        -- Actualizar el estado de todos los vehículos
        UPDATE vehicles SET status = 'Incompleto' WHERE company_id = NEW.company_id;
      END IF;
    ELSIF NEW.applies = 'Persona' THEN
      IF NEW.company_id IS NULL THEN
        FOR company_owner_id IN SELECT owner_id FROM company LOOP
          FOR employee_id IN SELECT id FROM employees WHERE company_id = company_owner_id LOOP
            INSERT INTO documents_employees (id_document_types, applies, validity, state, is_active, user_id, deny_reason, document_path)
            VALUES (NEW.id, employee_id, NULL, 'pendiente', TRUE, company_owner_id, NULL, NULL);
          END LOOP;
        END LOOP;
        -- Actualizar el estado de todos los empleados
        UPDATE employees SET status = 'Incompleto' WHERE company_id IN (SELECT owner_id FROM company);
      ELSE
        SELECT owner_id INTO company_owner_id FROM company WHERE id = NEW.company_id;
        FOR employee_id IN SELECT id FROM employees WHERE company_id = NEW.company_id LOOP
          INSERT INTO documents_employees (id_document_types, applies, validity, state, is_active, user_id, deny_reason, document_path)
          VALUES (NEW.id, employee_id, NULL, 'pendiente', TRUE, company_owner_id, NULL, NULL);
        END LOOP;
        -- Actualizar el estado de todos los empleados
        UPDATE employees SET status = 'Incompleto' WHERE company_id = NEW.company_id;
      END IF;
    ELSIF NEW.applies = 'Empresa' THEN
      SELECT owner_id INTO company_owner_id FROM company WHERE id = NEW.company_id;
      INSERT INTO documents_company (id_document_types, applies, validity, state, is_active, user_id, deny_reason, document_path)
      VALUES (NEW.id, NEW.company_id, NULL, 'pendiente', TRUE, NULL, NULL, NULL);
    END IF;
  END IF;
  RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.add_to_companies_employees()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$DECLARE
  contractor_id UUID;
BEGIN
  -- Insertar en companies_employees
  INSERT INTO companies_employees (company_id, employee_id)
  VALUES (NEW.company_id, NEW.id);

  -- Verificar si NEW.allocated_to no está vacío
  IF NEW.allocated_to IS NOT NULL AND array_length(NEW.allocated_to, 1) > 0 THEN
    -- Insertar en contractor_employee para cada ID en allocated_to
    FOREACH contractor_id IN ARRAY NEW.allocated_to
    LOOP
      INSERT INTO contractor_employee (contractor_id, employee_id)
      VALUES (contractor_id, NEW.id);
    END LOOP;
  END IF;

  RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.create_user_for_external_login()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
  IF NEW.raw_user_meta_data <> '{}'::jsonb THEN
    INSERT INTO public.profile (id, fullname, email, credential_id, avatar,role)
    VALUES (
      NEW.id,
      NEW.raw_user_meta_data->>'full_name',
      NEW.raw_user_meta_data->>'email',
      NEW.id,
      NEW.raw_user_meta_data->>'avatar_url',
      'CodeControlClient'
    );
  END IF;
  RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.deactivate_service_items()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
    UPDATE service_items
    SET is_active = NEW.is_active
    WHERE customer_service_id = NEW.id;
    RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.delete_expired_subscriptions()
 RETURNS void
 LANGUAGE plpgsql
AS $function$
BEGIN
  DELETE FROM hired_modules WHERE due_to < CURRENT_DATE;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.enviar_documentos_a_46_dias()
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
    destinatario TEXT;
    asunto TEXT;
    contenido TEXT;
    documentos_usuario TEXT[];
    documento RECORD;
    destinatarios_adicionales TEXT[];
    todos_destinatarios TEXT[];
    nombre_compania TEXT;
BEGIN
    -- Obtener todos los destinatarios únicos
    FOR destinatario IN SELECT DISTINCT profile.email FROM profile
    LOOP
        -- Obtener documentos por vencer
        SELECT array_agg(
            'Documento: ' || dt.name || 
            ', Vence: ' || to_char(de.validity::timestamptz, 'DD/MM/YYYY HH24:MI:SS') || 
            ', Empleado: ' || e.name || ' ' || e.last_name
        )
        INTO documentos_usuario
        FROM documents_employees de
        JOIN document_types dt ON de.id_document_types = dt.id
        JOIN employees e ON de.applies = e.id
        JOIN profile ON e.profile_id = profile.id
        WHERE 
            de.validity::timestamptz >= CURRENT_TIMESTAMP
            AND de.validity::timestamptz < (CURRENT_TIMESTAMP + INTERVAL '45 days')
            AND profile.email = destinatario;

        -- Solo continuar si hay documentos por vencer
        IF documentos_usuario IS NOT NULL THEN
            SELECT c.company_name
            INTO nombre_compania
            FROM company c
            JOIN share_company_users scu ON c.id = scu.company_id
            JOIN profile p ON scu.profile_id = p.id
            WHERE p.email = destinatario;

            contenido := '
            <!DOCTYPE html PUBLIC >
            <html lang="es">
            <head>
                <meta content="text/html; charset=UTF-8"/>
                <link rel="preconnect" href="https://fonts.googleapis.com"/>
                <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
                <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap" rel="stylesheet"/>
            </head>
            <body>
                <table align="center" width="100%" border="0" cellpadding="0" cellspacing="0" style="max-width:600px">
                    <tbody>
                        <tr style="width:100%">
                            <td>
                                <table align="center" width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#ffffff" style="max-width:600px;background-color:#ffffff;border-radius:8px;border:1px solid #e9e9e9;margin-bottom:40px">
                                    <tbody>
                                        <tr>
                                            <td style="padding-top:40px;padding-bottom:40px;padding-left:40px;padding-right:40px">
                                                <table width="100%" align="center" border="0" cellpadding="0" cellspacing="0">
                                                    <tbody>
                                                        <tr>
                                                            <td>
                                                                <h2 style="margin-top:0px;margin-bottom:0px;font-family:''Roboto'',sans-serif;font-weight:500;font-size:20px;line-height:24px;color:#1f1f1f">
                                                                    Documentos próximos a vencer
                                                                </h2>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                                <table align="center" width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#ffffff" style="max-width:600px;background-color:#ffffff;border-radius:8px;border:1px solid #e9e9e9;margin-bottom:40px">
                                    <tbody>
                                        <tr>
                                            <td style="padding-top:40px;padding-bottom:40px;padding-left:40px;padding-right:40px">
                                                <table width="100%" align="center" border="0" cellpadding="0" cellspacing="0">
                                                    <tbody>
                                                        <tr>
                                                            <td>
                                                                <p style="margin-top:0px;margin-bottom:0px;font-family:''Roboto'',sans-serif;font-size:16px;line-height:24px;color:#3c4149">
                                                                    Hola, te escribimos desde ' || nombre_compania || '.
                                                                </p>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                                <table align="center" width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#ffffff" style="max-width:600px;background-color:#ffffff;border-radius:8px;border:1px solid #e9e9e9;margin-bottom:40px">
                                    <tbody>
                                        <tr>
                                            <td style="padding-top:40px;padding-bottom:40px;padding-left:40px;padding-right:40px">
                                                <table width="100%" align="center" border="0" cellpadding="0" cellspacing="0">
                                                    <tbody>
                                                        <tr>
                                                            <td>
                                                                <p style="margin-top:0px;margin-bottom:20px;font-family:''Roboto'',sans-serif;font-size:16px;line-height:24px;color:#3c4149">
                                                                    Los siguientes documentos están próximos a vencer:
                                                                </p>
                                                            </td>
                                                        </tr>
                                                        <tr>
                                                            <td>
                                                                <ul style="margin-top:0px;margin-bottom:20px;font-family:''Roboto'',sans-serif;font-size:16px;line-height:24px;color:#3c4149">';

            -- Agregar cada documento a la lista
            FOR i IN 1..array_upper(documentos_usuario, 1) LOOP
                contenido := contenido || '<li>' || documentos_usuario[i] || '</li>';
            END LOOP;

            contenido := contenido || '</ul>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </body>
            </html>';

            -- Construir el asunto del correo electrónico
            asunto := 'Documentos por vencer';

            -- Obtener los destinatarios adicionales
            SELECT array_agg(p.email)
            INTO destinatarios_adicionales
            FROM share_company_users scu
            JOIN company c ON scu.company_id = c.id
            JOIN profile p ON scu.profile_id = p.id
            WHERE c.owner_id = (SELECT id FROM profile WHERE email = destinatario);

            -- Crear el array todos_destinatarios
            todos_destinatarios := ARRAY[destinatario] || destinatarios_adicionales;

            -- Enviar el correo electrónico al destinatario actual
            PERFORM net.http_post(
                url := 'https://zktcbhhlcksopklpnubj.supabase.co/functions/v1/resend',
                body := jsonb_build_object(
                    'from', 'Codecontrol <team@codecontrol.com.ar>',
                    'to', todos_destinatarios,
                    'subject', asunto,
                    'html', contenido
                )
            );
        END IF;
    END LOOP;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.enviar_documentos_vencidos()
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
    destinatario TEXT;
    asunto TEXT;
    contenido TEXT;
    documentos_usuario TEXT[];
    documento RECORD;
    nombre_compania TEXT;
    destinatarios_adicionales TEXT[];
    todos_destinatarios TEXT[];
BEGIN
    -- Obtener todos los destinatarios únicos
    FOR destinatario IN SELECT DISTINCT profile.email FROM profile
    LOOP
        -- Obtener documentos vencidos
        SELECT array_agg(
            'Documento: ' || dt.name || 
            ', Venció: ' || to_char(de.validity::timestamptz, 'DD/MM/YYYY HH24:MI:SS') || 
            ', Empleado: ' || e.name || ' ' || e.last_name
        )
        INTO documentos_usuario
        FROM documents_employees de
        JOIN document_types dt ON de.id_document_types = dt.id
        JOIN employees e ON de.applies = e.id
        JOIN profile ON e.profile_id = profile.id
        WHERE 
            de.validity::timestamptz < CURRENT_TIMESTAMP
            AND profile.email = destinatario;

        -- Solo continuar si hay documentos vencidos
        IF documentos_usuario IS NOT NULL THEN
            SELECT c.company_name
            INTO nombre_compania
            FROM company c
            JOIN share_company_users scu ON c.id = scu.company_id
            JOIN profile p ON scu.profile_id = p.id
            WHERE p.email = destinatario;

            contenido := '
            <!DOCTYPE html PUBLIC >
            <html lang="es">
            <head>
                <meta content="text/html; charset=UTF-8"/>
                <link rel="preconnect" href="https://fonts.googleapis.com"/>
                <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
                <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap" rel="stylesheet"/>
            </head>
            <body>
                <table align="center" width="100%" border="0" cellpadding="0" cellspacing="0" style="max-width:600px">
                    <tbody>
                        <tr style="width:100%">
                            <td>
                                <table align="center" width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#ffffff" style="max-width:600px;background-color:#ffffff;border-radius:8px;border:1px solid #e9e9e9;margin-bottom:40px">
                                    <tbody>
                                        <tr>
                                            <td style="padding-top:40px;padding-bottom:40px;padding-left:40px;padding-right:40px">
                                                <table width="100%" align="center" border="0" cellpadding="0" cellspacing="0">
                                                    <tbody>
                                                        <tr>
                                                            <td>
                                                                <h2 style="margin-top:0px;margin-bottom:0px;font-family:''Roboto'',sans-serif;font-weight:500;font-size:20px;line-height:24px;color:#1f1f1f">
                                                                    Documentos vencidos
                                                                </h2>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                                <table align="center" width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#ffffff" style="max-width:600px;background-color:#ffffff;border-radius:8px;border:1px solid #e9e9e9;margin-bottom:40px">
                                    <tbody>
                                        <tr>
                                            <td style="padding-top:40px;padding-bottom:40px;padding-left:40px;padding-right:40px">
                                                <table width="100%" align="center" border="0" cellpadding="0" cellspacing="0">
                                                    <tbody>
                                                        <tr>
                                                            <td>
                                                                <p style="margin-top:0px;margin-bottom:0px;font-family:''Roboto'',sans-serif;font-size:16px;line-height:24px;color:#3c4149">
                                                                    Hola, te escribimos desde ' || nombre_compania || '.
                                                                </p>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                                <table align="center" width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#ffffff" style="max-width:600px;background-color:#ffffff;border-radius:8px;border:1px solid #e9e9e9;margin-bottom:40px">
                                    <tbody>
                                        <tr>
                                            <td style="padding-top:40px;padding-bottom:40px;padding-left:40px;padding-right:40px">
                                                <table width="100%" align="center" border="0" cellpadding="0" cellspacing="0">
                                                    <tbody>
                                                        <tr>
                                                            <td>
                                                                <p style="margin-top:0px;margin-bottom:20px;font-family:''Roboto'',sans-serif;font-size:16px;line-height:24px;color:#3c4149">
                                                                    Los siguientes documentos están vencidos:
                                                                </p>
                                                            </td>
                                                        </tr>
                                                        <tr>
                                                            <td>
                                                                <ul style="margin-top:0px;margin-bottom:20px;font-family:''Roboto'',sans-serif;font-size:16px;line-height:24px;color:#3c4149">';

            -- Agregar cada documento a la lista
            FOR i IN 1..array_upper(documentos_usuario, 1) LOOP
                contenido := contenido || '<li>' || documentos_usuario[i] || '</li>';
            END LOOP;

            contenido := contenido || '</ul>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </body>
            </html>';

            -- Construir el asunto del correo electrónico
            asunto := 'Documentos vencidos';

            -- Obtener los destinatarios adicionales
            SELECT array_agg(p.email)
            INTO destinatarios_adicionales
            FROM share_company_users scu
            JOIN company c ON scu.company_id = c.id
            JOIN profile p ON scu.profile_id = p.id
            WHERE c.owner_id = (SELECT id FROM profile WHERE email = destinatario);

            -- Crear el array todos_destinatarios
            todos_destinatarios := ARRAY[destinatario] || destinatarios_adicionales;

            -- Enviar el correo electrónico al destinatario actual
            PERFORM net.http_post(
                url := 'https://zktcbhhlcksopklpnubj.supabase.co/functions/v1/resend',
                body := jsonb_build_object(
                    'from', 'Codecontrol <team@codecontrol.com.ar>',
                    'to', todos_destinatarios,
                    'subject', asunto,
                    'html', contenido
                )
            );
        END IF;
    END LOOP;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.equipment_allocated_to()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
  contractor_id UUID;
BEGIN
  IF NEW.allocated_to IS NOT NULL AND array_length(NEW.allocated_to, 1) > 0 THEN
    -- Insertar en contractor_employee para cada ID en allocated_to
    FOREACH contractor_id IN ARRAY NEW.allocated_to
    LOOP
      INSERT INTO contractor_equipment(contractor_id, equipment_id)
      VALUES (contractor_id, NEW.id);
    END LOOP;
  END IF;

  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.handle_employees_diagram_changes()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$DECLARE
    v_short_description TEXT;
    v_prev_date TIMESTAMPTZ;
    v_diagram_name TEXT;
    v_old_diagram_name TEXT;
BEGIN
    -- Obtener la descripción corta y el nombre del diagrama actual
    SELECT short_description, name INTO v_short_description, v_diagram_name
    FROM diagram_type
    WHERE id = NEW.diagram_type;

    -- Formatear la fecha
    v_prev_date := TO_TIMESTAMP(NEW.day || '-' || NEW.month || '-' || NEW.year || ' 00:00:00', 'DD-MM-YYYY HH24:MI:SS');

    -- Insertar en diagrams_logs
    IF TG_OP = 'INSERT' THEN
        INSERT INTO diagrams_logs (prev_date, description, state, prev_state, employee_id, diagram_id)
        VALUES (v_prev_date, v_short_description, v_diagram_name, 'Nuevo', NEW.employee_id, NEW.diagram_type);
    ELSIF TG_OP = 'UPDATE' THEN
        -- Obtener el nombre del diagrama anterior
        SELECT name INTO v_old_diagram_name
        FROM diagram_type
        WHERE id = OLD.diagram_type;

        -- Obtener la fecha anterior
        v_prev_date := TO_TIMESTAMP(OLD.day || '-' || OLD.month || '-' || OLD.year || ' 00:00:00', 'DD-MM-YYYY HH24:MI:SS');
        
        INSERT INTO diagrams_logs (prev_date, description, state, prev_state, employee_id, diagram_id)
        VALUES (v_prev_date, v_short_description, v_diagram_name, v_old_diagram_name, NEW.employee_id, NEW.diagram_type);
    END IF;

    RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.log_document_employee_changes()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
    IF TG_OP = 'INSERT' THEN
        INSERT INTO documents_employees_logs (documents_employees_id, modified_by, updated_at)
        VALUES (NEW.id, NEW.user_id, now());
    ELSIF TG_OP = 'UPDATE' THEN
        INSERT INTO documents_employees_logs (documents_employees_id, modified_by, updated_at)
        VALUES (NEW.id, NEW.user_id, now());
    END IF;
    RETURN NULL;
END;$function$
;

CREATE OR REPLACE FUNCTION public.log_document_equipment_changes()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
    IF TG_OP = 'INSERT' THEN
        INSERT INTO documents_equipment_logs (documents_equipment_id, modified_by, updated_at)
        VALUES (NEW.id, NEW.user_id, now());
    ELSIF TG_OP = 'UPDATE' THEN
        INSERT INTO documents_equipment_logs (documents_equipment_id, modified_by, updated_at)
        VALUES (NEW.id, NEW.user_id, now());
    END IF;
    RETURN NULL;
END;$function$
;

CREATE OR REPLACE FUNCTION public.log_repair_changes()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$DECLARE
    v_count INT;
BEGIN
    -- Verificar si ya existe un registro duplicado
    SELECT COUNT(*)
    INTO v_count
    FROM repairlogs
    WHERE repair_id = NEW.id
      AND description = COALESCE(NULLIF(NEW.mechanic_description, ''), 
                CASE NEW.state
                    WHEN 'Pendiente' THEN 'La solicitud está pendiente.'
                    WHEN 'Esperando repuestos' THEN 'La solicitud está esperando repuestos.'
                    WHEN 'En reparación' THEN 'La solicitud está en reparación.'
                    WHEN 'Finalizado' THEN 'La solicitud ha sido finalizada.'
                    WHEN 'Cancelado' THEN 'La solicitud ha sido cancelada.'
                    WHEN 'Rechazado' THEN 'La solicitud ha sido rechazada.'
                    WHEN 'Programado' THEN 
                        'La solicitud ha sido programada para el ' || TO_CHAR(NEW.scheduled, 'DD') || ' de ' ||
                        CASE TO_CHAR(NEW.scheduled, 'MM')
                            WHEN '01' THEN 'enero'
                            WHEN '02' THEN 'febrero'
                            WHEN '03' THEN 'marzo'
                            WHEN '04' THEN 'abril'
                            WHEN '05' THEN 'mayo'
                            WHEN '06' THEN 'junio'
                            WHEN '07' THEN 'julio'
                            WHEN '08' THEN 'agosto'
                            WHEN '09' THEN 'septiembre'
                            WHEN '10' THEN 'octubre'
                            WHEN '11' THEN 'noviembre'
                            WHEN '12' THEN 'diciembre'
                        END
                    ELSE 'Estado desconocido.'
                END)
      AND title = NEW.state::text
      AND ABS(EXTRACT(EPOCH FROM (NEW.created_at - created_at))) < 3;

    -- Si no se encontró un duplicado, insertar el nuevo registro
    IF v_count = 0 THEN
        IF TG_OP = 'INSERT' THEN
            INSERT INTO repairlogs (modified_by_employee, modified_by_user, kilometer, repair_id, description, title)
            VALUES (NEW.employee_id, (SELECT auth.uid()), NEW.kilometer, NEW.id, 'La solicitud de mantenimiento ha sido registrada y se encuentra en estado de espera.', NEW.state::text);
        ELSIF TG_OP = 'UPDATE' THEN
            INSERT INTO repairlogs (kilometer, modified_by_user, repair_id, description, title)
            VALUES (NEW.kilometer,
                (SELECT auth.uid()),
                NEW.id, 
                COALESCE(NULLIF(NEW.mechanic_description, ''), 
                    CASE NEW.state
                        WHEN 'Pendiente' THEN 'La solicitud está pendiente.'
                        WHEN 'Esperando repuestos' THEN 'La solicitud está esperando repuestos.'
                        WHEN 'En reparación' THEN 'La solicitud está en reparación.'
                        WHEN 'Finalizado' THEN 'La solicitud ha sido finalizada.'
                        WHEN 'Cancelado' THEN 'La solicitud ha sido cancelada.'
                        WHEN 'Rechazado' THEN 'La solicitud ha sido rechazada.'
                        WHEN 'Programado' THEN 
                            'La solicitud ha sido programada para el ' || TO_CHAR(NEW.scheduled, 'DD') || ' de ' ||
                            CASE TO_CHAR(NEW.scheduled, 'MM')
                                WHEN '01' THEN 'enero'
                                WHEN '02' THEN 'febrero'
                                WHEN '03' THEN 'marzo'
                                WHEN '04' THEN 'abril'
                                WHEN '05' THEN 'mayo'
                                WHEN '06' THEN 'junio'
                                WHEN '07' THEN 'julio'
                                WHEN '08' THEN 'agosto'
                                WHEN '09' THEN 'septiembre'
                                WHEN '10' THEN 'octubre'
                                WHEN '11' THEN 'noviembre'
                                WHEN '12' THEN 'diciembre'
                            END
                        ELSE 'Estado desconocido.'
                    END
                ), 
                NEW.state::text
            );
        END IF;
    END IF;

    RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.migrate_document(target_id uuid, execute_migration boolean DEFAULT false)
 RETURNS TABLE(old_path text, new_path text, success boolean, error_message text, action_taken text, storage_migration_id uuid)
 LANGUAGE plpgsql
AS $function$
DECLARE
    doc_record RECORD;
    formatted_company_name TEXT;
    formatted_applies_name TEXT;
    formatted_document_type TEXT;
    formatted_applies_path TEXT;
    file_extension TEXT;
    version_info TEXT;
    new_storage_path TEXT;
    existing_doc RECORD;
    should_replace BOOLEAN;
    migration_id UUID;
    equipment_identifier TEXT;
BEGIN
    -- Create a temporary table to store the migration results
    CREATE TEMP TABLE IF NOT EXISTS migration_results (
        old_path TEXT,
        new_path TEXT,
        success BOOLEAN,
        error_message TEXT,
        action_taken TEXT,
        storage_migration_id UUID
    );
    
    -- Get the document and related information
    SELECT 
        d.*,
        dt.name as document_type_name,
        dt.applies as applies_type,
        c.company_name,
        c.company_cuit as company_cuit,
        v.domain as equipment_domain,
        v.serie as equipment_serie
    INTO doc_record
    FROM documents_equipment d
    JOIN document_types dt ON d.id_document_types = dt.id
    JOIN vehicles v ON d.applies::uuid = v.id
    JOIN company c ON v.company_id = c.id
    WHERE d.id = target_id;

    IF doc_record IS NULL THEN
        INSERT INTO migration_results 
        VALUES (NULL, NULL, FALSE, 'Document not found', 'SKIPPED', NULL);
        RETURN QUERY SELECT * FROM migration_results;
        DROP TABLE migration_results;
        RETURN;
    END IF;

    BEGIN
              -- Format company name (remove special chars and spaces)
        formatted_company_name := translate(LOWER(doc_record.company_name), ' áéíóúñ', '-aeioun');
        formatted_company_name := regexp_replace(formatted_company_name, '[^a-z0-9\-]', '', 'g');
        formatted_company_name := formatted_company_name || '-(' || doc_record.company_cuit || ')';
        
        -- Use domain if available, otherwise use serie, with parentheses
        equipment_identifier := COALESCE(doc_record.equipment_domain, doc_record.equipment_serie, 'sin-identificador');
        equipment_identifier := UPPER(equipment_identifier);
        equipment_identifier := equipment_identifier || '-(' || equipment_identifier || ')';
        
        -- Format document type name (replace accents, slashes and spaces with hyphens)
        formatted_document_type := translate(LOWER(doc_record.document_type_name), 'áéíóúñ', 'aeioun');
        -- Replace both spaces and slashes with hyphens
        formatted_document_type := regexp_replace(formatted_document_type, '[\s/]+', '-', 'g');
        
        -- Get file extension
        file_extension := substring(doc_record.document_path from '\.([^.]+)$');
        
        -- Determine version info based on document properties
        IF doc_record.validity IS NOT NULL THEN
            version_info := to_char(doc_record.validity::timestamp, 'DD-MM-YYYY');
        ELSIF doc_record.period IS NOT NULL THEN
            version_info := doc_record.period;
        ELSE
            version_info := 'v0';
        END IF;
        
        -- Construct new path (without adding -sp)
        new_storage_path := format('%s/equipos/%s/%s-(%s).%s',
            formatted_company_name,
            equipment_identifier,
            formatted_document_type,
            version_info,
            file_extension
        );

        -- Check for existing documents with similar path (ignoring extension)
        SELECT *
        INTO existing_doc
        FROM documents_equipment
        WHERE document_path SIMILAR TO regexp_replace(new_storage_path, '\.[^.]+$', '') || '.%'
        AND id != doc_record.id;

        should_replace := FALSE;
        
        IF existing_doc IS NOT NULL THEN
            -- Compare versions/dates to decide which to keep
            IF doc_record.validity IS NOT NULL AND existing_doc.validity IS NOT NULL THEN
                -- Keep the one with the later validity date
                should_replace := (doc_record.validity::timestamp > existing_doc.validity::timestamp);
            ELSIF doc_record.period IS NOT NULL AND existing_doc.period IS NOT NULL THEN
                -- Keep the one with the later period
                should_replace := (doc_record.period > existing_doc.period);
            ELSE
                -- If no clear versioning, keep the newer document (based on created_at)
                should_replace := (doc_record.created_at > existing_doc.created_at);
            END IF;
        END IF;

        IF execute_migration THEN
            IF existing_doc IS NULL OR should_replace THEN
                -- Registrar la migración de almacenamiento necesaria
                INSERT INTO storage_migrations (document_id, old_path, new_path)
                VALUES (doc_record.id, doc_record.document_path, new_storage_path)
                RETURNING id INTO migration_id;

                -- Update the document path in database
                UPDATE documents_equipment
                SET document_path = new_storage_path
                WHERE id = doc_record.id;

                IF existing_doc IS NOT NULL AND should_replace THEN
                    -- Mark the old document as inactive
                    UPDATE documents_equipment
                    SET is_active = FALSE
                    WHERE id = existing_doc.id;

                    -- Register the old document for deletion
                    INSERT INTO storage_migrations (document_id, old_path, new_path)
                    VALUES (existing_doc.id, existing_doc.document_path, 'TO_DELETE');
                END IF;

                INSERT INTO migration_results 
                VALUES (
                    doc_record.document_path, 
                    new_storage_path, 
                    TRUE, 
                    'Migration registered. Physical file needs to be moved.',
                    CASE 
                        WHEN existing_doc IS NOT NULL THEN 'REPLACED_EXISTING'
                        ELSE 'MIGRATED'
                    END,
                    migration_id
                );
            ELSE
                -- Keep existing document, mark current as inactive
                UPDATE documents_equipment
                SET is_active = FALSE
                WHERE id = doc_record.id;

                -- Register the current document for deletion
                INSERT INTO storage_migrations (document_id, old_path, new_path)
                VALUES (doc_record.id, doc_record.document_path, 'TO_DELETE')
                RETURNING id INTO migration_id;

                INSERT INTO migration_results 
                VALUES (
                    doc_record.document_path, 
                    existing_doc.document_path, 
                    TRUE, 
                    'Kept existing document',
                    'KEPT_EXISTING',
                    migration_id
                );
            END IF;
        ELSE
            -- Preview mode
            INSERT INTO migration_results 
            VALUES (
                doc_record.document_path, 
                new_storage_path, 
                TRUE, 
                CASE 
                    WHEN existing_doc IS NOT NULL THEN 
                        CASE 
                            WHEN should_replace THEN 'Will replace existing document'
                            ELSE 'Will keep existing document'
                        END
                    ELSE 'Will migrate'
                END,
                CASE 
                    WHEN existing_doc IS NOT NULL THEN
                        CASE 
                            WHEN should_replace THEN 'WILL_REPLACE'
                            ELSE 'WILL_KEEP_EXISTING'
                        END
                    ELSE 'WILL_MIGRATE'
                END,
                NULL
            );
        END IF;

    EXCEPTION WHEN OTHERS THEN
        -- Record error
        INSERT INTO migration_results 
        VALUES (doc_record.document_path, NULL, FALSE, SQLERRM, 'ERROR', NULL);
    END;
    
    -- Return results
    RETURN QUERY SELECT * FROM migration_results;
    
    -- Clean up
    DROP TABLE IF EXISTS migration_results;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.migrate_documents_preview()
 RETURNS TABLE(old_path text, new_path text, success boolean, error_message text)
 LANGUAGE plpgsql
AS $function$
DECLARE
    doc_record RECORD;
    formatted_company_name TEXT;
    formatted_applies_name TEXT;
    formatted_document_type TEXT;
    formatted_applies_path TEXT;
    file_extension TEXT;
    version_info TEXT;
    new_storage_path TEXT;
BEGIN
    -- Create a temporary table to store the migration results
    CREATE TEMP TABLE IF NOT EXISTS migration_results (
        old_path TEXT,
        new_path TEXT,
        success BOOLEAN,
        error_message TEXT
    );
    
    -- Loop through all documents with old path format
    FOR doc_record IN 
        SELECT 
            d.*,
            dt.name as document_type_name,
            dt.applies as applies_type,
            c.company_name,
            c.company_cuit as company_cuit,
            CONCAT(e.firstname, ' ', e.lastname) as applies_name,
            e.cuil as applies_document
        FROM documents_employees d
        JOIN document_types dt ON d.id_document_types = dt.id
        JOIN employees e ON d.applies::uuid = e.id
        JOIN companies_employees ce ON e.id = ce.employee_id
        JOIN company c ON ce.company_id = c.id
        WHERE d.document_path LIKE 'documentos-empleados/document-%'
    LOOP
        BEGIN
            -- Format company name (remove special chars and spaces)
            formatted_company_name := translate(LOWER(doc_record.company_name), ' áéíóúñ', '-aeioun');
            formatted_company_name := regexp_replace(formatted_company_name, '[^a-z0-9\-]', '', 'g');
            formatted_company_name := formatted_company_name || '-(' || doc_record.company_cuit || ')';
            
            -- Format applies path based on document type
            formatted_applies_path := translate(LOWER(doc_record.applies_type::text), ' áéíóúñ', '-aeioun');
            formatted_applies_path := regexp_replace(formatted_applies_path, '[^a-z0-9\-]', '', 'g');
            
            -- Format applies name and document
            formatted_applies_name := translate(LOWER(doc_record.applies_name), ' áéíóúñ', '-aeioun');
            formatted_applies_name := regexp_replace(formatted_applies_name, '[^a-z0-9\-]', '', 'g');
            formatted_applies_name := formatted_applies_name || '-(' || doc_record.applies_document || ')';
            
            -- Format document type name
            formatted_document_type := translate(LOWER(doc_record.document_type_name), ' áéíóúñ', '-aeioun');
            formatted_document_type := regexp_replace(formatted_document_type, '[^a-z0-9\-]', '', 'g');
            
            -- Get file extension
            file_extension := substring(doc_record.document_path from '\.([^.]+)$');
            
            -- Determine version info based on document properties
            IF doc_record.validity IS NOT NULL THEN
                version_info := doc_record.validity;
            ELSIF doc_record.period IS NOT NULL THEN
                version_info := doc_record.period;
            ELSE
                version_info := 'v1';
            END IF;
            
            -- Construct new path
            new_storage_path := format('%s/%s/%s/%s-(%s).%s',
                formatted_company_name,
                formatted_applies_path,
                formatted_applies_name,
                formatted_document_type,
                version_info,
                file_extension
            );

            -- Store the preview
            INSERT INTO migration_results (old_path, new_path, success, error_message)
            VALUES (
                doc_record.document_path, 
                new_storage_path, 
                TRUE, 
                'PREVIEW MODE'
            );
                
        EXCEPTION WHEN OTHERS THEN
            -- Record error
            INSERT INTO migration_results (old_path, new_path, success, error_message)
            VALUES (doc_record.document_path, NULL, FALSE, SQLERRM);
        END;
    END LOOP;
    
    -- Return results
    RETURN QUERY SELECT * FROM migration_results;
    
    -- Clean up
    DROP TABLE IF EXISTS migration_results;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.notify_document_update()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
    v_company_id UUID; -- Variable para almacenar el company_id
    resource text;
BEGIN
    -- Obtener el company_id basado en el ID proporcionado
    select 
  company_id INTO v_company_id
from
  documents_employees
  inner join employees on documents_employees.applies = employees.id
where
  documents_employees.id = NEW.id;
   resource :='employee';

    IF v_company_id IS NULL THEN
            -- Si no se encontró en documents_employees, buscar en documents_equipment
            SELECT company_id INTO v_company_id
            FROM documents_equipment  inner join vehicles on documents_equipment.applies = documents_equipment.id
            WHERE documents_equipment.id = NEW.id;
            resource :='equipment';
        END IF;

    IF NEW.state = 'rechazado' THEN
        INSERT INTO notifications (title, description, category, company_id, document_id,reference)
        VALUES ('Un documento ha sido rechazado', NEW.deny_reason, 'rechazado', v_company_id, NEW.id,resource);
    ELSIF NEW.state = 'aprobado' THEN
        INSERT INTO notifications (title, description, category, company_id, document_id,reference)
        VALUES ('Un documento ha sido aprobado', '', 'aprobado', v_company_id, NEW.id,resource);
    ELSIF NEW.state = 'vencido' THEN
        INSERT INTO notifications (title, description, category, company_id, document_id,reference)
        VALUES ('Venció un documento', '', 'vencimiento', v_company_id, NEW.id,resource);
    END IF;

    RETURN NEW;
END;

$function$
;

CREATE OR REPLACE FUNCTION public.obtener_documentos_por_vencer()
 RETURNS TABLE(tipo_documento text, correo_electronico text, fecha_vencimiento date, documento_empleado text, dominio_vehiculo text)
 LANGUAGE plpgsql
AS $function$BEGIN
    RETURN QUERY (
        SELECT 
            dt.name AS tipo_documento, 
            profile.email AS correo_electronico, 
            TO_DATE(de.validity, 'DD-MM-YYYY') AS fecha_vencimiento,
            e.document_number AS documento_empleado,
            NULL AS dominio_vehiculo
        FROM 
            documents_employees de
        JOIN 
            profile ON de.user_id = profile.id
        JOIN 
            document_types dt ON de.id_document_types = dt.id
        JOIN
            employees e ON de.applies = e.id
        WHERE 
            TO_DATE(de.validity, 'DD-MM-YYYY') >= CURRENT_DATE
            AND TO_DATE(de.validity, 'DD-MM-YYYY') < DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '45 days'
        UNION ALL
        SELECT 
            dt.name AS tipo_documento, 
            profile.email AS correo_electronico, 
            TO_DATE(de.validity, 'DD-MM-YYYY') AS fecha_vencimiento,
            NULL AS documento_empleado,
            v.domain AS dominio_vehiculo
        FROM 
            documents_equipment de
        JOIN 
            profile ON de.user_id = profile.id
        JOIN 
            document_types dt ON de.id_document_types = dt.id
        LEFT JOIN
            vehicles v ON de.applies = v.id
        WHERE 
            TO_DATE(de.validity, 'DD-MM-YYYY') >= CURRENT_DATE
            AND TO_DATE(de.validity, 'DD-MM-YYYY') < DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '1 month'
    );
END;$function$
;

CREATE OR REPLACE FUNCTION public.pruebaemail()
 RETURNS void
 LANGUAGE plpgsql
AS $function$DECLARE
    destinatario TEXT;
    asunto TEXT;
    contenido TEXT;
    documentos_usuario TEXT[];
    documento RECORD;
    destinatarios_adicionales TEXT[];
    todos_destinatarios TEXT[];
      nombre_compania TEXT;
BEGIN
    -- Obtener todos los destinatarios únicos
    FOR destinatario IN SELECT DISTINCT profile.email FROM profile
    LOOP
        -- Inicializar el contenido del correo electrónico para el destinatario actual
        contenido := '';

        

        -- Obtener todos los documentos para el destinatario actual
        SELECT 
            array_agg(
                E'<br>Tipo de documento: ' || tipo_documento ||
                '<br>Fecha de vencimiento: ' || fecha_vencimiento ||
                CASE WHEN documento_empleado IS NOT NULL THEN '<br>Documento del empleado: ' || documento_empleado ELSE '' END ||
                CASE WHEN dominio_vehiculo IS NOT NULL THEN '<br>Dominio del vehículo: ' || dominio_vehiculo ELSE '' END
            )
        INTO documentos_usuario
        FROM (
            SELECT 
                dt.name AS tipo_documento, 
                TO_DATE(de.validity, 'DD-MM-YYYY') AS fecha_vencimiento,
                e.document_number AS documento_empleado,
                v.domain AS dominio_vehiculo
            FROM 
                documents_employees de
            JOIN 
                profile ON de.user_id = profile.id
            JOIN 
                document_types dt ON de.id_document_types = dt.id
            LEFT JOIN
                employees e ON de.applies = e.id
            LEFT JOIN
                vehicles v ON de.applies = v.id
            WHERE 
                TO_DATE(de.validity, 'DD-MM-YYYY') >= CURRENT_DATE
                AND TO_DATE(de.validity, 'DD-MM-YYYY') < DATE_TRUNC('day', CURRENT_DATE) + INTERVAL '45 days'
                AND profile.email = destinatario
            UNION ALL
            SELECT 
                dt.name AS tipo_documento, 
                TO_DATE(de.validity, 'DD-MM-YYYY') AS fecha_vencimiento,
                NULL AS documento_empleado,
                v.domain AS dominio_vehiculo
            FROM 
                documents_equipment de
            JOIN 
                profile ON de.user_id = profile.id
            JOIN 
                document_types dt ON de.id_document_types = dt.id
            LEFT JOIN
                vehicles v ON de.applies = v.id
            WHERE 
                TO_DATE(de.validity, 'DD-MM-YYYY') >= CURRENT_DATE
                AND TO_DATE(de.validity, 'DD-MM-YYYY') < DATE_TRUNC('day', CURRENT_DATE) + INTERVAL '45 days'
                AND profile.email = destinatario
        ) AS documentos;

          SELECT c.company_name
        INTO nombre_compania
        FROM company c
        JOIN share_company_users scu ON c.id = scu.company_id
        JOIN profile p ON scu.profile_id = p.id
        WHERE p.email = destinatario;

        -- Construir el contenido del correo electrónico con el HTML proporcionado
        contenido := '
          <!DOCTYPE html PUBLIC>
<html lang="es">
   <head>
      <meta content="text/html; charset=UTF-8" />
      <link rel="preconnect" href="https://fonts.googleapis.com" />
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
      <link
         href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap"
         rel="stylesheet"
      />
      <style>
         /* Estilos para modo claro */
         body {
            background-color: #ffffff;
            color: #0f172a;
            font-family: "Poppins", sans-serif;
         }

         .bg-primary {
            background-color: #1e293b;
         }

         .bg-muted {
            background-color: #f8fafc;
         }

         .text-primary {
            color: #1e293b;
         }

         .text-muted {
            color: #6b7280;
         }

         .text-white {
            color: #f8fafc;
         }

         /* Estilos para modo oscuro */
      </style>
   </head>
   <body>
      <table
         align="center"
         width="100%"
         border="0"
         cellpadding="0"
         cellspacing="0"
         role="presentation"
         style="max-width: 680px; margin: 0 auto"
         class="bg-muted"
      >
         <tbody>
            <tr style="width: 100%">
               <td>
                  <table
                     align="center"
                     width="100%"
                     border="0"
                     cellpadding="0"
                     cellspacing="0"
                     role="presentation"
                     style="
                        border-radius: 0.5rem 0.5rem 0 0;
                        display: flex;
                        flex-direction: column;
                     "
                     class="bg-primary"
                  >
                     <tbody>
                        <tr>
                           <td>
                              <table
                                 align="center"
                                 width="100%"
                                 border="0"
                                 cellpadding="0"
                                 cellspacing="0"
                                 role="presentation"
                              >
                                 <tbody style="width: 100%">
                                    <tr style="width: 100%">
                                       <td style="padding: 20px 30px 15px">
                                          <h1
                                             style="
                                                font-size: 27px;
                                                font-weight: bold;
                                                line-height: 27px;
                                             "
                                             class="text-white"
                                          >
                                             Codecontrol.com.ar
                                          </h1>
                                          <p
                                             style="
                                                font-size: 17px;
                                                line-height: 24px;
                                                margin: 16px 0;
                                             "
                                             class="text-white"
                                          >
                                             Documentos a Vencer en los próximos
                                             45 días
                                          </p>
                                       </td>
                                       <td style="padding: 30px 10px">
                                          <img
                                             src="https://zktcbhhlcksopklpnubj.supabase.co/storage/v1/object/public/logo/24417298440.png"
                                             style="
                                                display: block;
                                                outline: none;
                                                border: none;
                                                text-decoration: none;
                                                max-width: 100%;
                                             "
                                             width="140"
                                          />
                                       </td>
                                    </tr>
                                 </tbody>
                              </table>
                           </td>
                        </tr>
                     </tbody>
                  </table>
                  <table
                     align="center"
                     width="100%"
                     border="0"
                     cellpadding="0"
                     cellspacing="0"
                     role="presentation"
                     style="padding: 30px 30px 40px 30px"
                  >
                     <tbody>
                        <tr>
                           <td>
                              <h2
                                 style="
                                    margin: 0 0 15px;
                                    font-weight: bold;
                                    font-size: 21px;
                                    line-height: 21px;
                                 "
                                 class="text-primary"
                              >
                                 Listado de Documentos de la compañia
                                 {nombre_compania}
                              </h2>
                              <hr
                                 style="
                                    width: 100%;
                                    border: none;
                                    border-top: 1px solid #e2e8f0;
                                    margin: 30px 0;
                                 "
                              />
                              <ul>
                                 {documentos_usuario}
                              </ul>
                              <hr
                                 style="
                                    width: 100%;
                                    border: none;
                                    border-top: 1px solid #e2e8f0;
                                    margin: 30px 0;
                                 "
                              />
                              <h2
                                 style="
                                    margin: 0 0 15px;
                                    font-weight: bold;
                                    font-size: 21px;
                                    line-height: 21px;
                                 "
                                 class="text-primary"
                              >
                                 Para ver los documentos diríjase a la app
                              </h2>
                              <table
                                 align="center"
                                 width="100%"
                                 border="0"
                                 cellpadding="0"
                                 cellspacing="0"
                                 role="presentation"
                                 style="margin-top: 24px; display: block"
                              >
                                 <tbody>
                                    <tr>
                                       <td>
                                          <a
                                             href="https://codecontrol.com.ar"
                                             style="
                                                text-decoration: none;
                                                font-size: 17px;
                                                line-height: 17px;
                                                padding: 13px 17px;
                                                border-radius: 0.5rem;
                                                max-width: 120px;
                                                color: #f8fafc;
                                                background-color: #1e293b;
                                             "
                                             target="_blank"
                                             >ir a codecontrol.com.ar</a
                                          >
                                       </td>
                                    </tr>
                                 </tbody>
                              </table>
                           </td>
                        </tr>
                     </tbody>
                  </table>
               </td>
            </tr>
         </tbody>
      </table>
   </body>
</html>
';

        -- Construir el asunto del correo electrónico
        asunto := 'Documentos por vencer';

         -- Obtener los destinatarios adicionales
        SELECT array_agg(p.email)
        INTO destinatarios_adicionales
        FROM share_company_users scu
        JOIN company c ON scu.company_id = c.id
        JOIN profile p ON scu.profile_id = p.id
        WHERE c.owner_id = (SELECT id FROM profile WHERE email = destinatario);

         -- Crear el array todos_destinatarios
        todos_destinatarios := ARRAY[destinatario] || destinatarios_adicionales;

        -- Enviar el correo electrónico al destinatario actual
        PERFORM net.http_post(
            url := 'https://zktcbhhlcksopklpnubj.supabase.co/functions/v1/resend',
            body := jsonb_build_object(
                'from', 'Codecontrol <team@codecontrol.com.ar>',
              'to', todos_destinatarios,
                'subject', asunto,
                'html', contenido
            )
        );
        
    END LOOP;
END;$function$
;

CREATE OR REPLACE FUNCTION public.update_company_by_defect()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
    IF NEW.by_defect = true THEN
        UPDATE company
        SET by_defect = false
        WHERE owner_id = NEW.owner_id AND id <> NEW.id;
    END IF;
    RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.update_status_trigger()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  -- Para documents_employees
  IF TG_TABLE_NAME = 'documents_employees' THEN
    IF NEW.state = 'vencido' THEN
      UPDATE employees
      SET status = 'Completo con doc vencida'
      WHERE id = NEW.applies;
    ELSIF (SELECT COUNT(*) FROM documents_employees WHERE applies = NEW.applies AND state != 'presentado') = 0 THEN
      UPDATE employees
      SET status = 'Completo'
      WHERE id = NEW.applies;
    ELSE
      UPDATE employees
      SET status = 'Incompleto'
      WHERE id = NEW.applies;
    END IF;
  END IF;

  -- Para documents_equipment
  IF TG_TABLE_NAME = 'documents_equipment' THEN
    IF NEW.state = 'vencido' THEN
      UPDATE vehicles
      SET status = 'Completo con doc vencida'
      WHERE id = NEW.applies;
    ELSIF (SELECT COUNT(*) FROM documents_equipment WHERE applies = NEW.applies AND state != 'presentado') = 0 THEN
      UPDATE vehicles
      SET status = 'Completo'
      WHERE id = NEW.applies;
    ELSE
      UPDATE vehicles
      SET status = 'Incompleto'
      WHERE id = NEW.applies;
    END IF;
  END IF;

  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.verificar_documentos_vencidos_prueba()
 RETURNS void
 LANGUAGE plpgsql
AS $function$DECLARE
    v_company_id uuid;
    resource text;
BEGIN
    -- Establecer el estilo de fecha
    SET datestyle = 'ISO, DMY';

    -- Verificar documentos vencidos en documents_employees
    UPDATE documents_employees
    SET state = 'vencido'
    WHERE validity::date < current_date;

    -- Verificar documentos vencidos en documents_equipment
    UPDATE documents_equipment
    SET state = 'vencido'
    WHERE validity::date < current_date;

    -- Buscar company_id en documents_employees
    SELECT company_id INTO v_company_id
    FROM documents_employees
    WHERE documents_employees.id = NEW.id;

    -- Si no se encontró en documents_employees, buscar en documents_equipment
    IF v_company_id IS NULL THEN
        SELECT company_id INTO v_company_id
        FROM documents_equipment
        WHERE documents_equipment.id = NEW.id;
        resource := 'equipment';
    ELSE
        resource := 'employee';
    END IF;

    -- Insertar entrada en la tabla notifications si se cambió el estado
    IF FOUND THEN
        INSERT INTO notifications (
            title,
            description,
            category,
            company_id,
            document_id,
            reference
        )
        VALUES (
            'Venció un documento',
            '',
            'vencimiento',
            v_company_id,
            NEW.id,
            resource
        );
    END IF;
END;$function$
;

grant delete on table "public"."assing_customer" to "anon";

grant insert on table "public"."assing_customer" to "anon";

grant references on table "public"."assing_customer" to "anon";

grant select on table "public"."assing_customer" to "anon";

grant trigger on table "public"."assing_customer" to "anon";

grant truncate on table "public"."assing_customer" to "anon";

grant update on table "public"."assing_customer" to "anon";

grant delete on table "public"."assing_customer" to "authenticated";

grant insert on table "public"."assing_customer" to "authenticated";

grant references on table "public"."assing_customer" to "authenticated";

grant select on table "public"."assing_customer" to "authenticated";

grant trigger on table "public"."assing_customer" to "authenticated";

grant truncate on table "public"."assing_customer" to "authenticated";

grant update on table "public"."assing_customer" to "authenticated";

grant delete on table "public"."assing_customer" to "service_role";

grant insert on table "public"."assing_customer" to "service_role";

grant references on table "public"."assing_customer" to "service_role";

grant select on table "public"."assing_customer" to "service_role";

grant trigger on table "public"."assing_customer" to "service_role";

grant truncate on table "public"."assing_customer" to "service_role";

grant update on table "public"."assing_customer" to "service_role";

grant delete on table "public"."brand_vehicles" to "anon";

grant insert on table "public"."brand_vehicles" to "anon";

grant references on table "public"."brand_vehicles" to "anon";

grant select on table "public"."brand_vehicles" to "anon";

grant trigger on table "public"."brand_vehicles" to "anon";

grant truncate on table "public"."brand_vehicles" to "anon";

grant update on table "public"."brand_vehicles" to "anon";

grant delete on table "public"."brand_vehicles" to "authenticated";

grant insert on table "public"."brand_vehicles" to "authenticated";

grant references on table "public"."brand_vehicles" to "authenticated";

grant select on table "public"."brand_vehicles" to "authenticated";

grant trigger on table "public"."brand_vehicles" to "authenticated";

grant truncate on table "public"."brand_vehicles" to "authenticated";

grant update on table "public"."brand_vehicles" to "authenticated";

grant delete on table "public"."brand_vehicles" to "service_role";

grant insert on table "public"."brand_vehicles" to "service_role";

grant references on table "public"."brand_vehicles" to "service_role";

grant select on table "public"."brand_vehicles" to "service_role";

grant trigger on table "public"."brand_vehicles" to "service_role";

grant truncate on table "public"."brand_vehicles" to "service_role";

grant update on table "public"."brand_vehicles" to "service_role";

grant delete on table "public"."category" to "anon";

grant insert on table "public"."category" to "anon";

grant references on table "public"."category" to "anon";

grant select on table "public"."category" to "anon";

grant trigger on table "public"."category" to "anon";

grant truncate on table "public"."category" to "anon";

grant update on table "public"."category" to "anon";

grant delete on table "public"."category" to "authenticated";

grant insert on table "public"."category" to "authenticated";

grant references on table "public"."category" to "authenticated";

grant select on table "public"."category" to "authenticated";

grant trigger on table "public"."category" to "authenticated";

grant truncate on table "public"."category" to "authenticated";

grant update on table "public"."category" to "authenticated";

grant delete on table "public"."category" to "service_role";

grant insert on table "public"."category" to "service_role";

grant references on table "public"."category" to "service_role";

grant select on table "public"."category" to "service_role";

grant trigger on table "public"."category" to "service_role";

grant truncate on table "public"."category" to "service_role";

grant update on table "public"."category" to "service_role";

grant delete on table "public"."category_employee" to "anon";

grant insert on table "public"."category_employee" to "anon";

grant references on table "public"."category_employee" to "anon";

grant select on table "public"."category_employee" to "anon";

grant trigger on table "public"."category_employee" to "anon";

grant truncate on table "public"."category_employee" to "anon";

grant update on table "public"."category_employee" to "anon";

grant delete on table "public"."category_employee" to "authenticated";

grant insert on table "public"."category_employee" to "authenticated";

grant references on table "public"."category_employee" to "authenticated";

grant select on table "public"."category_employee" to "authenticated";

grant trigger on table "public"."category_employee" to "authenticated";

grant truncate on table "public"."category_employee" to "authenticated";

grant update on table "public"."category_employee" to "authenticated";

grant delete on table "public"."category_employee" to "service_role";

grant insert on table "public"."category_employee" to "service_role";

grant references on table "public"."category_employee" to "service_role";

grant select on table "public"."category_employee" to "service_role";

grant trigger on table "public"."category_employee" to "service_role";

grant truncate on table "public"."category_employee" to "service_role";

grant update on table "public"."category_employee" to "service_role";

grant delete on table "public"."cities" to "anon";

grant insert on table "public"."cities" to "anon";

grant references on table "public"."cities" to "anon";

grant select on table "public"."cities" to "anon";

grant trigger on table "public"."cities" to "anon";

grant truncate on table "public"."cities" to "anon";

grant update on table "public"."cities" to "anon";

grant delete on table "public"."cities" to "authenticated";

grant insert on table "public"."cities" to "authenticated";

grant references on table "public"."cities" to "authenticated";

grant select on table "public"."cities" to "authenticated";

grant trigger on table "public"."cities" to "authenticated";

grant truncate on table "public"."cities" to "authenticated";

grant update on table "public"."cities" to "authenticated";

grant delete on table "public"."cities" to "service_role";

grant insert on table "public"."cities" to "service_role";

grant references on table "public"."cities" to "service_role";

grant select on table "public"."cities" to "service_role";

grant trigger on table "public"."cities" to "service_role";

grant truncate on table "public"."cities" to "service_role";

grant update on table "public"."cities" to "service_role";

grant delete on table "public"."companies_employees" to "anon";

grant insert on table "public"."companies_employees" to "anon";

grant references on table "public"."companies_employees" to "anon";

grant select on table "public"."companies_employees" to "anon";

grant trigger on table "public"."companies_employees" to "anon";

grant truncate on table "public"."companies_employees" to "anon";

grant update on table "public"."companies_employees" to "anon";

grant delete on table "public"."companies_employees" to "authenticated";

grant insert on table "public"."companies_employees" to "authenticated";

grant references on table "public"."companies_employees" to "authenticated";

grant select on table "public"."companies_employees" to "authenticated";

grant trigger on table "public"."companies_employees" to "authenticated";

grant truncate on table "public"."companies_employees" to "authenticated";

grant update on table "public"."companies_employees" to "authenticated";

grant delete on table "public"."companies_employees" to "service_role";

grant insert on table "public"."companies_employees" to "service_role";

grant references on table "public"."companies_employees" to "service_role";

grant select on table "public"."companies_employees" to "service_role";

grant trigger on table "public"."companies_employees" to "service_role";

grant truncate on table "public"."companies_employees" to "service_role";

grant update on table "public"."companies_employees" to "service_role";

grant delete on table "public"."company" to "anon";

grant insert on table "public"."company" to "anon";

grant references on table "public"."company" to "anon";

grant select on table "public"."company" to "anon";

grant trigger on table "public"."company" to "anon";

grant truncate on table "public"."company" to "anon";

grant update on table "public"."company" to "anon";

grant delete on table "public"."company" to "authenticated";

grant insert on table "public"."company" to "authenticated";

grant references on table "public"."company" to "authenticated";

grant select on table "public"."company" to "authenticated";

grant trigger on table "public"."company" to "authenticated";

grant truncate on table "public"."company" to "authenticated";

grant update on table "public"."company" to "authenticated";

grant delete on table "public"."company" to "service_role";

grant insert on table "public"."company" to "service_role";

grant references on table "public"."company" to "service_role";

grant select on table "public"."company" to "service_role";

grant trigger on table "public"."company" to "service_role";

grant truncate on table "public"."company" to "service_role";

grant update on table "public"."company" to "service_role";

grant delete on table "public"."contacts" to "anon";

grant insert on table "public"."contacts" to "anon";

grant references on table "public"."contacts" to "anon";

grant select on table "public"."contacts" to "anon";

grant trigger on table "public"."contacts" to "anon";

grant truncate on table "public"."contacts" to "anon";

grant update on table "public"."contacts" to "anon";

grant delete on table "public"."contacts" to "authenticated";

grant insert on table "public"."contacts" to "authenticated";

grant references on table "public"."contacts" to "authenticated";

grant select on table "public"."contacts" to "authenticated";

grant trigger on table "public"."contacts" to "authenticated";

grant truncate on table "public"."contacts" to "authenticated";

grant update on table "public"."contacts" to "authenticated";

grant delete on table "public"."contacts" to "service_role";

grant insert on table "public"."contacts" to "service_role";

grant references on table "public"."contacts" to "service_role";

grant select on table "public"."contacts" to "service_role";

grant trigger on table "public"."contacts" to "service_role";

grant truncate on table "public"."contacts" to "service_role";

grant update on table "public"."contacts" to "service_role";

grant delete on table "public"."contractor_employee" to "anon";

grant insert on table "public"."contractor_employee" to "anon";

grant references on table "public"."contractor_employee" to "anon";

grant select on table "public"."contractor_employee" to "anon";

grant trigger on table "public"."contractor_employee" to "anon";

grant truncate on table "public"."contractor_employee" to "anon";

grant update on table "public"."contractor_employee" to "anon";

grant delete on table "public"."contractor_employee" to "authenticated";

grant insert on table "public"."contractor_employee" to "authenticated";

grant references on table "public"."contractor_employee" to "authenticated";

grant select on table "public"."contractor_employee" to "authenticated";

grant trigger on table "public"."contractor_employee" to "authenticated";

grant truncate on table "public"."contractor_employee" to "authenticated";

grant update on table "public"."contractor_employee" to "authenticated";

grant delete on table "public"."contractor_employee" to "service_role";

grant insert on table "public"."contractor_employee" to "service_role";

grant references on table "public"."contractor_employee" to "service_role";

grant select on table "public"."contractor_employee" to "service_role";

grant trigger on table "public"."contractor_employee" to "service_role";

grant truncate on table "public"."contractor_employee" to "service_role";

grant update on table "public"."contractor_employee" to "service_role";

grant delete on table "public"."contractor_equipment" to "anon";

grant insert on table "public"."contractor_equipment" to "anon";

grant references on table "public"."contractor_equipment" to "anon";

grant select on table "public"."contractor_equipment" to "anon";

grant trigger on table "public"."contractor_equipment" to "anon";

grant truncate on table "public"."contractor_equipment" to "anon";

grant update on table "public"."contractor_equipment" to "anon";

grant delete on table "public"."contractor_equipment" to "authenticated";

grant insert on table "public"."contractor_equipment" to "authenticated";

grant references on table "public"."contractor_equipment" to "authenticated";

grant select on table "public"."contractor_equipment" to "authenticated";

grant trigger on table "public"."contractor_equipment" to "authenticated";

grant truncate on table "public"."contractor_equipment" to "authenticated";

grant update on table "public"."contractor_equipment" to "authenticated";

grant delete on table "public"."contractor_equipment" to "service_role";

grant insert on table "public"."contractor_equipment" to "service_role";

grant references on table "public"."contractor_equipment" to "service_role";

grant select on table "public"."contractor_equipment" to "service_role";

grant trigger on table "public"."contractor_equipment" to "service_role";

grant truncate on table "public"."contractor_equipment" to "service_role";

grant update on table "public"."contractor_equipment" to "service_role";

grant delete on table "public"."contractors" to "anon";

grant insert on table "public"."contractors" to "anon";

grant references on table "public"."contractors" to "anon";

grant select on table "public"."contractors" to "anon";

grant trigger on table "public"."contractors" to "anon";

grant truncate on table "public"."contractors" to "anon";

grant update on table "public"."contractors" to "anon";

grant delete on table "public"."contractors" to "authenticated";

grant insert on table "public"."contractors" to "authenticated";

grant references on table "public"."contractors" to "authenticated";

grant select on table "public"."contractors" to "authenticated";

grant trigger on table "public"."contractors" to "authenticated";

grant truncate on table "public"."contractors" to "authenticated";

grant update on table "public"."contractors" to "authenticated";

grant delete on table "public"."contractors" to "service_role";

grant insert on table "public"."contractors" to "service_role";

grant references on table "public"."contractors" to "service_role";

grant select on table "public"."contractors" to "service_role";

grant trigger on table "public"."contractors" to "service_role";

grant truncate on table "public"."contractors" to "service_role";

grant update on table "public"."contractors" to "service_role";

grant delete on table "public"."countries" to "anon";

grant insert on table "public"."countries" to "anon";

grant references on table "public"."countries" to "anon";

grant select on table "public"."countries" to "anon";

grant trigger on table "public"."countries" to "anon";

grant truncate on table "public"."countries" to "anon";

grant update on table "public"."countries" to "anon";

grant delete on table "public"."countries" to "authenticated";

grant insert on table "public"."countries" to "authenticated";

grant references on table "public"."countries" to "authenticated";

grant select on table "public"."countries" to "authenticated";

grant trigger on table "public"."countries" to "authenticated";

grant truncate on table "public"."countries" to "authenticated";

grant update on table "public"."countries" to "authenticated";

grant delete on table "public"."countries" to "service_role";

grant insert on table "public"."countries" to "service_role";

grant references on table "public"."countries" to "service_role";

grant select on table "public"."countries" to "service_role";

grant trigger on table "public"."countries" to "service_role";

grant truncate on table "public"."countries" to "service_role";

grant update on table "public"."countries" to "service_role";

grant delete on table "public"."covenant" to "anon";

grant insert on table "public"."covenant" to "anon";

grant references on table "public"."covenant" to "anon";

grant select on table "public"."covenant" to "anon";

grant trigger on table "public"."covenant" to "anon";

grant truncate on table "public"."covenant" to "anon";

grant update on table "public"."covenant" to "anon";

grant delete on table "public"."covenant" to "authenticated";

grant insert on table "public"."covenant" to "authenticated";

grant references on table "public"."covenant" to "authenticated";

grant select on table "public"."covenant" to "authenticated";

grant trigger on table "public"."covenant" to "authenticated";

grant truncate on table "public"."covenant" to "authenticated";

grant update on table "public"."covenant" to "authenticated";

grant delete on table "public"."covenant" to "service_role";

grant insert on table "public"."covenant" to "service_role";

grant references on table "public"."covenant" to "service_role";

grant select on table "public"."covenant" to "service_role";

grant trigger on table "public"."covenant" to "service_role";

grant truncate on table "public"."covenant" to "service_role";

grant update on table "public"."covenant" to "service_role";

grant delete on table "public"."custom_form" to "anon";

grant insert on table "public"."custom_form" to "anon";

grant references on table "public"."custom_form" to "anon";

grant select on table "public"."custom_form" to "anon";

grant trigger on table "public"."custom_form" to "anon";

grant truncate on table "public"."custom_form" to "anon";

grant update on table "public"."custom_form" to "anon";

grant delete on table "public"."custom_form" to "authenticated";

grant insert on table "public"."custom_form" to "authenticated";

grant references on table "public"."custom_form" to "authenticated";

grant select on table "public"."custom_form" to "authenticated";

grant trigger on table "public"."custom_form" to "authenticated";

grant truncate on table "public"."custom_form" to "authenticated";

grant update on table "public"."custom_form" to "authenticated";

grant delete on table "public"."custom_form" to "service_role";

grant insert on table "public"."custom_form" to "service_role";

grant references on table "public"."custom_form" to "service_role";

grant select on table "public"."custom_form" to "service_role";

grant trigger on table "public"."custom_form" to "service_role";

grant truncate on table "public"."custom_form" to "service_role";

grant update on table "public"."custom_form" to "service_role";

grant delete on table "public"."customer_services" to "anon";

grant insert on table "public"."customer_services" to "anon";

grant references on table "public"."customer_services" to "anon";

grant select on table "public"."customer_services" to "anon";

grant trigger on table "public"."customer_services" to "anon";

grant truncate on table "public"."customer_services" to "anon";

grant update on table "public"."customer_services" to "anon";

grant delete on table "public"."customer_services" to "authenticated";

grant insert on table "public"."customer_services" to "authenticated";

grant references on table "public"."customer_services" to "authenticated";

grant select on table "public"."customer_services" to "authenticated";

grant trigger on table "public"."customer_services" to "authenticated";

grant truncate on table "public"."customer_services" to "authenticated";

grant update on table "public"."customer_services" to "authenticated";

grant delete on table "public"."customer_services" to "service_role";

grant insert on table "public"."customer_services" to "service_role";

grant references on table "public"."customer_services" to "service_role";

grant select on table "public"."customer_services" to "service_role";

grant trigger on table "public"."customer_services" to "service_role";

grant truncate on table "public"."customer_services" to "service_role";

grant update on table "public"."customer_services" to "service_role";

grant delete on table "public"."customers" to "anon";

grant insert on table "public"."customers" to "anon";

grant references on table "public"."customers" to "anon";

grant select on table "public"."customers" to "anon";

grant trigger on table "public"."customers" to "anon";

grant truncate on table "public"."customers" to "anon";

grant update on table "public"."customers" to "anon";

grant delete on table "public"."customers" to "authenticated";

grant insert on table "public"."customers" to "authenticated";

grant references on table "public"."customers" to "authenticated";

grant select on table "public"."customers" to "authenticated";

grant trigger on table "public"."customers" to "authenticated";

grant truncate on table "public"."customers" to "authenticated";

grant update on table "public"."customers" to "authenticated";

grant delete on table "public"."customers" to "service_role";

grant insert on table "public"."customers" to "service_role";

grant references on table "public"."customers" to "service_role";

grant select on table "public"."customers" to "service_role";

grant trigger on table "public"."customers" to "service_role";

grant truncate on table "public"."customers" to "service_role";

grant update on table "public"."customers" to "service_role";

grant delete on table "public"."dailyreport" to "anon";

grant insert on table "public"."dailyreport" to "anon";

grant references on table "public"."dailyreport" to "anon";

grant select on table "public"."dailyreport" to "anon";

grant trigger on table "public"."dailyreport" to "anon";

grant truncate on table "public"."dailyreport" to "anon";

grant update on table "public"."dailyreport" to "anon";

grant delete on table "public"."dailyreport" to "authenticated";

grant insert on table "public"."dailyreport" to "authenticated";

grant references on table "public"."dailyreport" to "authenticated";

grant select on table "public"."dailyreport" to "authenticated";

grant trigger on table "public"."dailyreport" to "authenticated";

grant truncate on table "public"."dailyreport" to "authenticated";

grant update on table "public"."dailyreport" to "authenticated";

grant delete on table "public"."dailyreport" to "service_role";

grant insert on table "public"."dailyreport" to "service_role";

grant references on table "public"."dailyreport" to "service_role";

grant select on table "public"."dailyreport" to "service_role";

grant trigger on table "public"."dailyreport" to "service_role";

grant truncate on table "public"."dailyreport" to "service_role";

grant update on table "public"."dailyreport" to "service_role";

grant delete on table "public"."dailyreportemployeerelations" to "anon";

grant insert on table "public"."dailyreportemployeerelations" to "anon";

grant references on table "public"."dailyreportemployeerelations" to "anon";

grant select on table "public"."dailyreportemployeerelations" to "anon";

grant trigger on table "public"."dailyreportemployeerelations" to "anon";

grant truncate on table "public"."dailyreportemployeerelations" to "anon";

grant update on table "public"."dailyreportemployeerelations" to "anon";

grant delete on table "public"."dailyreportemployeerelations" to "authenticated";

grant insert on table "public"."dailyreportemployeerelations" to "authenticated";

grant references on table "public"."dailyreportemployeerelations" to "authenticated";

grant select on table "public"."dailyreportemployeerelations" to "authenticated";

grant trigger on table "public"."dailyreportemployeerelations" to "authenticated";

grant truncate on table "public"."dailyreportemployeerelations" to "authenticated";

grant update on table "public"."dailyreportemployeerelations" to "authenticated";

grant delete on table "public"."dailyreportemployeerelations" to "service_role";

grant insert on table "public"."dailyreportemployeerelations" to "service_role";

grant references on table "public"."dailyreportemployeerelations" to "service_role";

grant select on table "public"."dailyreportemployeerelations" to "service_role";

grant trigger on table "public"."dailyreportemployeerelations" to "service_role";

grant truncate on table "public"."dailyreportemployeerelations" to "service_role";

grant update on table "public"."dailyreportemployeerelations" to "service_role";

grant delete on table "public"."dailyreportequipmentrelations" to "anon";

grant insert on table "public"."dailyreportequipmentrelations" to "anon";

grant references on table "public"."dailyreportequipmentrelations" to "anon";

grant select on table "public"."dailyreportequipmentrelations" to "anon";

grant trigger on table "public"."dailyreportequipmentrelations" to "anon";

grant truncate on table "public"."dailyreportequipmentrelations" to "anon";

grant update on table "public"."dailyreportequipmentrelations" to "anon";

grant delete on table "public"."dailyreportequipmentrelations" to "authenticated";

grant insert on table "public"."dailyreportequipmentrelations" to "authenticated";

grant references on table "public"."dailyreportequipmentrelations" to "authenticated";

grant select on table "public"."dailyreportequipmentrelations" to "authenticated";

grant trigger on table "public"."dailyreportequipmentrelations" to "authenticated";

grant truncate on table "public"."dailyreportequipmentrelations" to "authenticated";

grant update on table "public"."dailyreportequipmentrelations" to "authenticated";

grant delete on table "public"."dailyreportequipmentrelations" to "service_role";

grant insert on table "public"."dailyreportequipmentrelations" to "service_role";

grant references on table "public"."dailyreportequipmentrelations" to "service_role";

grant select on table "public"."dailyreportequipmentrelations" to "service_role";

grant trigger on table "public"."dailyreportequipmentrelations" to "service_role";

grant truncate on table "public"."dailyreportequipmentrelations" to "service_role";

grant update on table "public"."dailyreportequipmentrelations" to "service_role";

grant delete on table "public"."dailyreportrows" to "anon";

grant insert on table "public"."dailyreportrows" to "anon";

grant references on table "public"."dailyreportrows" to "anon";

grant select on table "public"."dailyreportrows" to "anon";

grant trigger on table "public"."dailyreportrows" to "anon";

grant truncate on table "public"."dailyreportrows" to "anon";

grant update on table "public"."dailyreportrows" to "anon";

grant delete on table "public"."dailyreportrows" to "authenticated";

grant insert on table "public"."dailyreportrows" to "authenticated";

grant references on table "public"."dailyreportrows" to "authenticated";

grant select on table "public"."dailyreportrows" to "authenticated";

grant trigger on table "public"."dailyreportrows" to "authenticated";

grant truncate on table "public"."dailyreportrows" to "authenticated";

grant update on table "public"."dailyreportrows" to "authenticated";

grant delete on table "public"."dailyreportrows" to "service_role";

grant insert on table "public"."dailyreportrows" to "service_role";

grant references on table "public"."dailyreportrows" to "service_role";

grant select on table "public"."dailyreportrows" to "service_role";

grant trigger on table "public"."dailyreportrows" to "service_role";

grant truncate on table "public"."dailyreportrows" to "service_role";

grant update on table "public"."dailyreportrows" to "service_role";

grant delete on table "public"."diagram_type" to "anon";

grant insert on table "public"."diagram_type" to "anon";

grant references on table "public"."diagram_type" to "anon";

grant select on table "public"."diagram_type" to "anon";

grant trigger on table "public"."diagram_type" to "anon";

grant truncate on table "public"."diagram_type" to "anon";

grant update on table "public"."diagram_type" to "anon";

grant delete on table "public"."diagram_type" to "authenticated";

grant insert on table "public"."diagram_type" to "authenticated";

grant references on table "public"."diagram_type" to "authenticated";

grant select on table "public"."diagram_type" to "authenticated";

grant trigger on table "public"."diagram_type" to "authenticated";

grant truncate on table "public"."diagram_type" to "authenticated";

grant update on table "public"."diagram_type" to "authenticated";

grant delete on table "public"."diagram_type" to "service_role";

grant insert on table "public"."diagram_type" to "service_role";

grant references on table "public"."diagram_type" to "service_role";

grant select on table "public"."diagram_type" to "service_role";

grant trigger on table "public"."diagram_type" to "service_role";

grant truncate on table "public"."diagram_type" to "service_role";

grant update on table "public"."diagram_type" to "service_role";

grant delete on table "public"."diagrams_logs" to "anon";

grant insert on table "public"."diagrams_logs" to "anon";

grant references on table "public"."diagrams_logs" to "anon";

grant select on table "public"."diagrams_logs" to "anon";

grant trigger on table "public"."diagrams_logs" to "anon";

grant truncate on table "public"."diagrams_logs" to "anon";

grant update on table "public"."diagrams_logs" to "anon";

grant delete on table "public"."diagrams_logs" to "authenticated";

grant insert on table "public"."diagrams_logs" to "authenticated";

grant references on table "public"."diagrams_logs" to "authenticated";

grant select on table "public"."diagrams_logs" to "authenticated";

grant trigger on table "public"."diagrams_logs" to "authenticated";

grant truncate on table "public"."diagrams_logs" to "authenticated";

grant update on table "public"."diagrams_logs" to "authenticated";

grant delete on table "public"."diagrams_logs" to "service_role";

grant insert on table "public"."diagrams_logs" to "service_role";

grant references on table "public"."diagrams_logs" to "service_role";

grant select on table "public"."diagrams_logs" to "service_role";

grant trigger on table "public"."diagrams_logs" to "service_role";

grant truncate on table "public"."diagrams_logs" to "service_role";

grant update on table "public"."diagrams_logs" to "service_role";

grant delete on table "public"."document_types" to "anon";

grant insert on table "public"."document_types" to "anon";

grant references on table "public"."document_types" to "anon";

grant select on table "public"."document_types" to "anon";

grant trigger on table "public"."document_types" to "anon";

grant truncate on table "public"."document_types" to "anon";

grant update on table "public"."document_types" to "anon";

grant delete on table "public"."document_types" to "authenticated";

grant insert on table "public"."document_types" to "authenticated";

grant references on table "public"."document_types" to "authenticated";

grant select on table "public"."document_types" to "authenticated";

grant trigger on table "public"."document_types" to "authenticated";

grant truncate on table "public"."document_types" to "authenticated";

grant update on table "public"."document_types" to "authenticated";

grant delete on table "public"."document_types" to "service_role";

grant insert on table "public"."document_types" to "service_role";

grant references on table "public"."document_types" to "service_role";

grant select on table "public"."document_types" to "service_role";

grant trigger on table "public"."document_types" to "service_role";

grant truncate on table "public"."document_types" to "service_role";

grant update on table "public"."document_types" to "service_role";

grant delete on table "public"."documents_company" to "anon";

grant insert on table "public"."documents_company" to "anon";

grant references on table "public"."documents_company" to "anon";

grant select on table "public"."documents_company" to "anon";

grant trigger on table "public"."documents_company" to "anon";

grant truncate on table "public"."documents_company" to "anon";

grant update on table "public"."documents_company" to "anon";

grant delete on table "public"."documents_company" to "authenticated";

grant insert on table "public"."documents_company" to "authenticated";

grant references on table "public"."documents_company" to "authenticated";

grant select on table "public"."documents_company" to "authenticated";

grant trigger on table "public"."documents_company" to "authenticated";

grant truncate on table "public"."documents_company" to "authenticated";

grant update on table "public"."documents_company" to "authenticated";

grant delete on table "public"."documents_company" to "service_role";

grant insert on table "public"."documents_company" to "service_role";

grant references on table "public"."documents_company" to "service_role";

grant select on table "public"."documents_company" to "service_role";

grant trigger on table "public"."documents_company" to "service_role";

grant truncate on table "public"."documents_company" to "service_role";

grant update on table "public"."documents_company" to "service_role";

grant delete on table "public"."documents_employees" to "anon";

grant insert on table "public"."documents_employees" to "anon";

grant references on table "public"."documents_employees" to "anon";

grant select on table "public"."documents_employees" to "anon";

grant trigger on table "public"."documents_employees" to "anon";

grant truncate on table "public"."documents_employees" to "anon";

grant update on table "public"."documents_employees" to "anon";

grant delete on table "public"."documents_employees" to "authenticated";

grant insert on table "public"."documents_employees" to "authenticated";

grant references on table "public"."documents_employees" to "authenticated";

grant select on table "public"."documents_employees" to "authenticated";

grant trigger on table "public"."documents_employees" to "authenticated";

grant truncate on table "public"."documents_employees" to "authenticated";

grant update on table "public"."documents_employees" to "authenticated";

grant delete on table "public"."documents_employees" to "service_role";

grant insert on table "public"."documents_employees" to "service_role";

grant references on table "public"."documents_employees" to "service_role";

grant select on table "public"."documents_employees" to "service_role";

grant trigger on table "public"."documents_employees" to "service_role";

grant truncate on table "public"."documents_employees" to "service_role";

grant update on table "public"."documents_employees" to "service_role";

grant delete on table "public"."documents_employees_logs" to "anon";

grant insert on table "public"."documents_employees_logs" to "anon";

grant references on table "public"."documents_employees_logs" to "anon";

grant select on table "public"."documents_employees_logs" to "anon";

grant trigger on table "public"."documents_employees_logs" to "anon";

grant truncate on table "public"."documents_employees_logs" to "anon";

grant update on table "public"."documents_employees_logs" to "anon";

grant delete on table "public"."documents_employees_logs" to "authenticated";

grant insert on table "public"."documents_employees_logs" to "authenticated";

grant references on table "public"."documents_employees_logs" to "authenticated";

grant select on table "public"."documents_employees_logs" to "authenticated";

grant trigger on table "public"."documents_employees_logs" to "authenticated";

grant truncate on table "public"."documents_employees_logs" to "authenticated";

grant update on table "public"."documents_employees_logs" to "authenticated";

grant delete on table "public"."documents_employees_logs" to "service_role";

grant insert on table "public"."documents_employees_logs" to "service_role";

grant references on table "public"."documents_employees_logs" to "service_role";

grant select on table "public"."documents_employees_logs" to "service_role";

grant trigger on table "public"."documents_employees_logs" to "service_role";

grant truncate on table "public"."documents_employees_logs" to "service_role";

grant update on table "public"."documents_employees_logs" to "service_role";

grant delete on table "public"."documents_equipment" to "anon";

grant insert on table "public"."documents_equipment" to "anon";

grant references on table "public"."documents_equipment" to "anon";

grant select on table "public"."documents_equipment" to "anon";

grant trigger on table "public"."documents_equipment" to "anon";

grant truncate on table "public"."documents_equipment" to "anon";

grant update on table "public"."documents_equipment" to "anon";

grant delete on table "public"."documents_equipment" to "authenticated";

grant insert on table "public"."documents_equipment" to "authenticated";

grant references on table "public"."documents_equipment" to "authenticated";

grant select on table "public"."documents_equipment" to "authenticated";

grant trigger on table "public"."documents_equipment" to "authenticated";

grant truncate on table "public"."documents_equipment" to "authenticated";

grant update on table "public"."documents_equipment" to "authenticated";

grant delete on table "public"."documents_equipment" to "service_role";

grant insert on table "public"."documents_equipment" to "service_role";

grant references on table "public"."documents_equipment" to "service_role";

grant select on table "public"."documents_equipment" to "service_role";

grant trigger on table "public"."documents_equipment" to "service_role";

grant truncate on table "public"."documents_equipment" to "service_role";

grant update on table "public"."documents_equipment" to "service_role";

grant delete on table "public"."documents_equipment_logs" to "anon";

grant insert on table "public"."documents_equipment_logs" to "anon";

grant references on table "public"."documents_equipment_logs" to "anon";

grant select on table "public"."documents_equipment_logs" to "anon";

grant trigger on table "public"."documents_equipment_logs" to "anon";

grant truncate on table "public"."documents_equipment_logs" to "anon";

grant update on table "public"."documents_equipment_logs" to "anon";

grant delete on table "public"."documents_equipment_logs" to "authenticated";

grant insert on table "public"."documents_equipment_logs" to "authenticated";

grant references on table "public"."documents_equipment_logs" to "authenticated";

grant select on table "public"."documents_equipment_logs" to "authenticated";

grant trigger on table "public"."documents_equipment_logs" to "authenticated";

grant truncate on table "public"."documents_equipment_logs" to "authenticated";

grant update on table "public"."documents_equipment_logs" to "authenticated";

grant delete on table "public"."documents_equipment_logs" to "service_role";

grant insert on table "public"."documents_equipment_logs" to "service_role";

grant references on table "public"."documents_equipment_logs" to "service_role";

grant select on table "public"."documents_equipment_logs" to "service_role";

grant trigger on table "public"."documents_equipment_logs" to "service_role";

grant truncate on table "public"."documents_equipment_logs" to "service_role";

grant update on table "public"."documents_equipment_logs" to "service_role";

grant delete on table "public"."employees" to "anon";

grant insert on table "public"."employees" to "anon";

grant references on table "public"."employees" to "anon";

grant select on table "public"."employees" to "anon";

grant trigger on table "public"."employees" to "anon";

grant truncate on table "public"."employees" to "anon";

grant update on table "public"."employees" to "anon";

grant delete on table "public"."employees" to "authenticated";

grant insert on table "public"."employees" to "authenticated";

grant references on table "public"."employees" to "authenticated";

grant select on table "public"."employees" to "authenticated";

grant trigger on table "public"."employees" to "authenticated";

grant truncate on table "public"."employees" to "authenticated";

grant update on table "public"."employees" to "authenticated";

grant delete on table "public"."employees" to "service_role";

grant insert on table "public"."employees" to "service_role";

grant references on table "public"."employees" to "service_role";

grant select on table "public"."employees" to "service_role";

grant trigger on table "public"."employees" to "service_role";

grant truncate on table "public"."employees" to "service_role";

grant update on table "public"."employees" to "service_role";

grant delete on table "public"."employees_diagram" to "anon";

grant insert on table "public"."employees_diagram" to "anon";

grant references on table "public"."employees_diagram" to "anon";

grant select on table "public"."employees_diagram" to "anon";

grant trigger on table "public"."employees_diagram" to "anon";

grant truncate on table "public"."employees_diagram" to "anon";

grant update on table "public"."employees_diagram" to "anon";

grant delete on table "public"."employees_diagram" to "authenticated";

grant insert on table "public"."employees_diagram" to "authenticated";

grant references on table "public"."employees_diagram" to "authenticated";

grant select on table "public"."employees_diagram" to "authenticated";

grant trigger on table "public"."employees_diagram" to "authenticated";

grant truncate on table "public"."employees_diagram" to "authenticated";

grant update on table "public"."employees_diagram" to "authenticated";

grant delete on table "public"."employees_diagram" to "service_role";

grant insert on table "public"."employees_diagram" to "service_role";

grant references on table "public"."employees_diagram" to "service_role";

grant select on table "public"."employees_diagram" to "service_role";

grant trigger on table "public"."employees_diagram" to "service_role";

grant truncate on table "public"."employees_diagram" to "service_role";

grant update on table "public"."employees_diagram" to "service_role";

grant delete on table "public"."form_answers" to "anon";

grant insert on table "public"."form_answers" to "anon";

grant references on table "public"."form_answers" to "anon";

grant select on table "public"."form_answers" to "anon";

grant trigger on table "public"."form_answers" to "anon";

grant truncate on table "public"."form_answers" to "anon";

grant update on table "public"."form_answers" to "anon";

grant delete on table "public"."form_answers" to "authenticated";

grant insert on table "public"."form_answers" to "authenticated";

grant references on table "public"."form_answers" to "authenticated";

grant select on table "public"."form_answers" to "authenticated";

grant trigger on table "public"."form_answers" to "authenticated";

grant truncate on table "public"."form_answers" to "authenticated";

grant update on table "public"."form_answers" to "authenticated";

grant delete on table "public"."form_answers" to "service_role";

grant insert on table "public"."form_answers" to "service_role";

grant references on table "public"."form_answers" to "service_role";

grant select on table "public"."form_answers" to "service_role";

grant trigger on table "public"."form_answers" to "service_role";

grant truncate on table "public"."form_answers" to "service_role";

grant update on table "public"."form_answers" to "service_role";

grant delete on table "public"."guild" to "anon";

grant insert on table "public"."guild" to "anon";

grant references on table "public"."guild" to "anon";

grant select on table "public"."guild" to "anon";

grant trigger on table "public"."guild" to "anon";

grant truncate on table "public"."guild" to "anon";

grant update on table "public"."guild" to "anon";

grant delete on table "public"."guild" to "authenticated";

grant insert on table "public"."guild" to "authenticated";

grant references on table "public"."guild" to "authenticated";

grant select on table "public"."guild" to "authenticated";

grant trigger on table "public"."guild" to "authenticated";

grant truncate on table "public"."guild" to "authenticated";

grant update on table "public"."guild" to "authenticated";

grant delete on table "public"."guild" to "service_role";

grant insert on table "public"."guild" to "service_role";

grant references on table "public"."guild" to "service_role";

grant select on table "public"."guild" to "service_role";

grant trigger on table "public"."guild" to "service_role";

grant truncate on table "public"."guild" to "service_role";

grant update on table "public"."guild" to "service_role";

grant delete on table "public"."handle_errors" to "anon";

grant insert on table "public"."handle_errors" to "anon";

grant references on table "public"."handle_errors" to "anon";

grant select on table "public"."handle_errors" to "anon";

grant trigger on table "public"."handle_errors" to "anon";

grant truncate on table "public"."handle_errors" to "anon";

grant update on table "public"."handle_errors" to "anon";

grant delete on table "public"."handle_errors" to "authenticated";

grant insert on table "public"."handle_errors" to "authenticated";

grant references on table "public"."handle_errors" to "authenticated";

grant select on table "public"."handle_errors" to "authenticated";

grant trigger on table "public"."handle_errors" to "authenticated";

grant truncate on table "public"."handle_errors" to "authenticated";

grant update on table "public"."handle_errors" to "authenticated";

grant delete on table "public"."handle_errors" to "service_role";

grant insert on table "public"."handle_errors" to "service_role";

grant references on table "public"."handle_errors" to "service_role";

grant select on table "public"."handle_errors" to "service_role";

grant trigger on table "public"."handle_errors" to "service_role";

grant truncate on table "public"."handle_errors" to "service_role";

grant update on table "public"."handle_errors" to "service_role";

grant delete on table "public"."hierarchy" to "anon";

grant insert on table "public"."hierarchy" to "anon";

grant references on table "public"."hierarchy" to "anon";

grant select on table "public"."hierarchy" to "anon";

grant trigger on table "public"."hierarchy" to "anon";

grant truncate on table "public"."hierarchy" to "anon";

grant update on table "public"."hierarchy" to "anon";

grant delete on table "public"."hierarchy" to "authenticated";

grant insert on table "public"."hierarchy" to "authenticated";

grant references on table "public"."hierarchy" to "authenticated";

grant select on table "public"."hierarchy" to "authenticated";

grant trigger on table "public"."hierarchy" to "authenticated";

grant truncate on table "public"."hierarchy" to "authenticated";

grant update on table "public"."hierarchy" to "authenticated";

grant delete on table "public"."hierarchy" to "service_role";

grant insert on table "public"."hierarchy" to "service_role";

grant references on table "public"."hierarchy" to "service_role";

grant select on table "public"."hierarchy" to "service_role";

grant trigger on table "public"."hierarchy" to "service_role";

grant truncate on table "public"."hierarchy" to "service_role";

grant update on table "public"."hierarchy" to "service_role";

grant delete on table "public"."hired_modules" to "anon";

grant insert on table "public"."hired_modules" to "anon";

grant references on table "public"."hired_modules" to "anon";

grant select on table "public"."hired_modules" to "anon";

grant trigger on table "public"."hired_modules" to "anon";

grant truncate on table "public"."hired_modules" to "anon";

grant update on table "public"."hired_modules" to "anon";

grant delete on table "public"."hired_modules" to "authenticated";

grant insert on table "public"."hired_modules" to "authenticated";

grant references on table "public"."hired_modules" to "authenticated";

grant select on table "public"."hired_modules" to "authenticated";

grant trigger on table "public"."hired_modules" to "authenticated";

grant truncate on table "public"."hired_modules" to "authenticated";

grant update on table "public"."hired_modules" to "authenticated";

grant delete on table "public"."hired_modules" to "service_role";

grant insert on table "public"."hired_modules" to "service_role";

grant references on table "public"."hired_modules" to "service_role";

grant select on table "public"."hired_modules" to "service_role";

grant trigger on table "public"."hired_modules" to "service_role";

grant truncate on table "public"."hired_modules" to "service_role";

grant update on table "public"."hired_modules" to "service_role";

grant delete on table "public"."industry_type" to "anon";

grant insert on table "public"."industry_type" to "anon";

grant references on table "public"."industry_type" to "anon";

grant select on table "public"."industry_type" to "anon";

grant trigger on table "public"."industry_type" to "anon";

grant truncate on table "public"."industry_type" to "anon";

grant update on table "public"."industry_type" to "anon";

grant delete on table "public"."industry_type" to "authenticated";

grant insert on table "public"."industry_type" to "authenticated";

grant references on table "public"."industry_type" to "authenticated";

grant select on table "public"."industry_type" to "authenticated";

grant trigger on table "public"."industry_type" to "authenticated";

grant truncate on table "public"."industry_type" to "authenticated";

grant update on table "public"."industry_type" to "authenticated";

grant delete on table "public"."industry_type" to "service_role";

grant insert on table "public"."industry_type" to "service_role";

grant references on table "public"."industry_type" to "service_role";

grant select on table "public"."industry_type" to "service_role";

grant trigger on table "public"."industry_type" to "service_role";

grant truncate on table "public"."industry_type" to "service_role";

grant update on table "public"."industry_type" to "service_role";

grant delete on table "public"."measure_units" to "anon";

grant insert on table "public"."measure_units" to "anon";

grant references on table "public"."measure_units" to "anon";

grant select on table "public"."measure_units" to "anon";

grant trigger on table "public"."measure_units" to "anon";

grant truncate on table "public"."measure_units" to "anon";

grant update on table "public"."measure_units" to "anon";

grant delete on table "public"."measure_units" to "authenticated";

grant insert on table "public"."measure_units" to "authenticated";

grant references on table "public"."measure_units" to "authenticated";

grant select on table "public"."measure_units" to "authenticated";

grant trigger on table "public"."measure_units" to "authenticated";

grant truncate on table "public"."measure_units" to "authenticated";

grant update on table "public"."measure_units" to "authenticated";

grant delete on table "public"."measure_units" to "service_role";

grant insert on table "public"."measure_units" to "service_role";

grant references on table "public"."measure_units" to "service_role";

grant select on table "public"."measure_units" to "service_role";

grant trigger on table "public"."measure_units" to "service_role";

grant truncate on table "public"."measure_units" to "service_role";

grant update on table "public"."measure_units" to "service_role";

grant delete on table "public"."model_vehicles" to "anon";

grant insert on table "public"."model_vehicles" to "anon";

grant references on table "public"."model_vehicles" to "anon";

grant select on table "public"."model_vehicles" to "anon";

grant trigger on table "public"."model_vehicles" to "anon";

grant truncate on table "public"."model_vehicles" to "anon";

grant update on table "public"."model_vehicles" to "anon";

grant delete on table "public"."model_vehicles" to "authenticated";

grant insert on table "public"."model_vehicles" to "authenticated";

grant references on table "public"."model_vehicles" to "authenticated";

grant select on table "public"."model_vehicles" to "authenticated";

grant trigger on table "public"."model_vehicles" to "authenticated";

grant truncate on table "public"."model_vehicles" to "authenticated";

grant update on table "public"."model_vehicles" to "authenticated";

grant delete on table "public"."model_vehicles" to "service_role";

grant insert on table "public"."model_vehicles" to "service_role";

grant references on table "public"."model_vehicles" to "service_role";

grant select on table "public"."model_vehicles" to "service_role";

grant trigger on table "public"."model_vehicles" to "service_role";

grant truncate on table "public"."model_vehicles" to "service_role";

grant update on table "public"."model_vehicles" to "service_role";

grant delete on table "public"."modules" to "anon";

grant insert on table "public"."modules" to "anon";

grant references on table "public"."modules" to "anon";

grant select on table "public"."modules" to "anon";

grant trigger on table "public"."modules" to "anon";

grant truncate on table "public"."modules" to "anon";

grant update on table "public"."modules" to "anon";

grant delete on table "public"."modules" to "authenticated";

grant insert on table "public"."modules" to "authenticated";

grant references on table "public"."modules" to "authenticated";

grant select on table "public"."modules" to "authenticated";

grant trigger on table "public"."modules" to "authenticated";

grant truncate on table "public"."modules" to "authenticated";

grant update on table "public"."modules" to "authenticated";

grant delete on table "public"."modules" to "service_role";

grant insert on table "public"."modules" to "service_role";

grant references on table "public"."modules" to "service_role";

grant select on table "public"."modules" to "service_role";

grant trigger on table "public"."modules" to "service_role";

grant truncate on table "public"."modules" to "service_role";

grant update on table "public"."modules" to "service_role";

grant delete on table "public"."notifications" to "anon";

grant insert on table "public"."notifications" to "anon";

grant references on table "public"."notifications" to "anon";

grant select on table "public"."notifications" to "anon";

grant trigger on table "public"."notifications" to "anon";

grant truncate on table "public"."notifications" to "anon";

grant update on table "public"."notifications" to "anon";

grant delete on table "public"."notifications" to "authenticated";

grant insert on table "public"."notifications" to "authenticated";

grant references on table "public"."notifications" to "authenticated";

grant select on table "public"."notifications" to "authenticated";

grant trigger on table "public"."notifications" to "authenticated";

grant truncate on table "public"."notifications" to "authenticated";

grant update on table "public"."notifications" to "authenticated";

grant delete on table "public"."notifications" to "service_role";

grant insert on table "public"."notifications" to "service_role";

grant references on table "public"."notifications" to "service_role";

grant select on table "public"."notifications" to "service_role";

grant trigger on table "public"."notifications" to "service_role";

grant truncate on table "public"."notifications" to "service_role";

grant update on table "public"."notifications" to "service_role";

grant delete on table "public"."profile" to "anon";

grant insert on table "public"."profile" to "anon";

grant references on table "public"."profile" to "anon";

grant select on table "public"."profile" to "anon";

grant trigger on table "public"."profile" to "anon";

grant truncate on table "public"."profile" to "anon";

grant update on table "public"."profile" to "anon";

grant delete on table "public"."profile" to "authenticated";

grant insert on table "public"."profile" to "authenticated";

grant references on table "public"."profile" to "authenticated";

grant select on table "public"."profile" to "authenticated";

grant trigger on table "public"."profile" to "authenticated";

grant truncate on table "public"."profile" to "authenticated";

grant update on table "public"."profile" to "authenticated";

grant delete on table "public"."profile" to "service_role";

grant insert on table "public"."profile" to "service_role";

grant references on table "public"."profile" to "service_role";

grant select on table "public"."profile" to "service_role";

grant trigger on table "public"."profile" to "service_role";

grant truncate on table "public"."profile" to "service_role";

grant update on table "public"."profile" to "service_role";

grant delete on table "public"."provinces" to "anon";

grant insert on table "public"."provinces" to "anon";

grant references on table "public"."provinces" to "anon";

grant select on table "public"."provinces" to "anon";

grant trigger on table "public"."provinces" to "anon";

grant truncate on table "public"."provinces" to "anon";

grant update on table "public"."provinces" to "anon";

grant delete on table "public"."provinces" to "authenticated";

grant insert on table "public"."provinces" to "authenticated";

grant references on table "public"."provinces" to "authenticated";

grant select on table "public"."provinces" to "authenticated";

grant trigger on table "public"."provinces" to "authenticated";

grant truncate on table "public"."provinces" to "authenticated";

grant update on table "public"."provinces" to "authenticated";

grant delete on table "public"."provinces" to "service_role";

grant insert on table "public"."provinces" to "service_role";

grant references on table "public"."provinces" to "service_role";

grant select on table "public"."provinces" to "service_role";

grant trigger on table "public"."provinces" to "service_role";

grant truncate on table "public"."provinces" to "service_role";

grant update on table "public"."provinces" to "service_role";

grant delete on table "public"."repair_solicitudes" to "anon";

grant insert on table "public"."repair_solicitudes" to "anon";

grant references on table "public"."repair_solicitudes" to "anon";

grant select on table "public"."repair_solicitudes" to "anon";

grant trigger on table "public"."repair_solicitudes" to "anon";

grant truncate on table "public"."repair_solicitudes" to "anon";

grant update on table "public"."repair_solicitudes" to "anon";

grant delete on table "public"."repair_solicitudes" to "authenticated";

grant insert on table "public"."repair_solicitudes" to "authenticated";

grant references on table "public"."repair_solicitudes" to "authenticated";

grant select on table "public"."repair_solicitudes" to "authenticated";

grant trigger on table "public"."repair_solicitudes" to "authenticated";

grant truncate on table "public"."repair_solicitudes" to "authenticated";

grant update on table "public"."repair_solicitudes" to "authenticated";

grant delete on table "public"."repair_solicitudes" to "service_role";

grant insert on table "public"."repair_solicitudes" to "service_role";

grant references on table "public"."repair_solicitudes" to "service_role";

grant select on table "public"."repair_solicitudes" to "service_role";

grant trigger on table "public"."repair_solicitudes" to "service_role";

grant truncate on table "public"."repair_solicitudes" to "service_role";

grant update on table "public"."repair_solicitudes" to "service_role";

grant delete on table "public"."repairlogs" to "anon";

grant insert on table "public"."repairlogs" to "anon";

grant references on table "public"."repairlogs" to "anon";

grant select on table "public"."repairlogs" to "anon";

grant trigger on table "public"."repairlogs" to "anon";

grant truncate on table "public"."repairlogs" to "anon";

grant update on table "public"."repairlogs" to "anon";

grant delete on table "public"."repairlogs" to "authenticated";

grant insert on table "public"."repairlogs" to "authenticated";

grant references on table "public"."repairlogs" to "authenticated";

grant select on table "public"."repairlogs" to "authenticated";

grant trigger on table "public"."repairlogs" to "authenticated";

grant truncate on table "public"."repairlogs" to "authenticated";

grant update on table "public"."repairlogs" to "authenticated";

grant delete on table "public"."repairlogs" to "service_role";

grant insert on table "public"."repairlogs" to "service_role";

grant references on table "public"."repairlogs" to "service_role";

grant select on table "public"."repairlogs" to "service_role";

grant trigger on table "public"."repairlogs" to "service_role";

grant truncate on table "public"."repairlogs" to "service_role";

grant update on table "public"."repairlogs" to "service_role";

grant delete on table "public"."roles" to "anon";

grant insert on table "public"."roles" to "anon";

grant references on table "public"."roles" to "anon";

grant select on table "public"."roles" to "anon";

grant trigger on table "public"."roles" to "anon";

grant truncate on table "public"."roles" to "anon";

grant update on table "public"."roles" to "anon";

grant delete on table "public"."roles" to "authenticated";

grant insert on table "public"."roles" to "authenticated";

grant references on table "public"."roles" to "authenticated";

grant select on table "public"."roles" to "authenticated";

grant trigger on table "public"."roles" to "authenticated";

grant truncate on table "public"."roles" to "authenticated";

grant update on table "public"."roles" to "authenticated";

grant delete on table "public"."roles" to "service_role";

grant insert on table "public"."roles" to "service_role";

grant references on table "public"."roles" to "service_role";

grant select on table "public"."roles" to "service_role";

grant trigger on table "public"."roles" to "service_role";

grant truncate on table "public"."roles" to "service_role";

grant update on table "public"."roles" to "service_role";

grant delete on table "public"."service_items" to "anon";

grant insert on table "public"."service_items" to "anon";

grant references on table "public"."service_items" to "anon";

grant select on table "public"."service_items" to "anon";

grant trigger on table "public"."service_items" to "anon";

grant truncate on table "public"."service_items" to "anon";

grant update on table "public"."service_items" to "anon";

grant delete on table "public"."service_items" to "authenticated";

grant insert on table "public"."service_items" to "authenticated";

grant references on table "public"."service_items" to "authenticated";

grant select on table "public"."service_items" to "authenticated";

grant trigger on table "public"."service_items" to "authenticated";

grant truncate on table "public"."service_items" to "authenticated";

grant update on table "public"."service_items" to "authenticated";

grant delete on table "public"."service_items" to "service_role";

grant insert on table "public"."service_items" to "service_role";

grant references on table "public"."service_items" to "service_role";

grant select on table "public"."service_items" to "service_role";

grant trigger on table "public"."service_items" to "service_role";

grant truncate on table "public"."service_items" to "service_role";

grant update on table "public"."service_items" to "service_role";

grant delete on table "public"."share_company_users" to "anon";

grant insert on table "public"."share_company_users" to "anon";

grant references on table "public"."share_company_users" to "anon";

grant select on table "public"."share_company_users" to "anon";

grant trigger on table "public"."share_company_users" to "anon";

grant truncate on table "public"."share_company_users" to "anon";

grant update on table "public"."share_company_users" to "anon";

grant delete on table "public"."share_company_users" to "authenticated";

grant insert on table "public"."share_company_users" to "authenticated";

grant references on table "public"."share_company_users" to "authenticated";

grant select on table "public"."share_company_users" to "authenticated";

grant trigger on table "public"."share_company_users" to "authenticated";

grant truncate on table "public"."share_company_users" to "authenticated";

grant update on table "public"."share_company_users" to "authenticated";

grant delete on table "public"."share_company_users" to "service_role";

grant insert on table "public"."share_company_users" to "service_role";

grant references on table "public"."share_company_users" to "service_role";

grant select on table "public"."share_company_users" to "service_role";

grant trigger on table "public"."share_company_users" to "service_role";

grant truncate on table "public"."share_company_users" to "service_role";

grant update on table "public"."share_company_users" to "service_role";

grant delete on table "public"."storage_migrations" to "anon";

grant insert on table "public"."storage_migrations" to "anon";

grant references on table "public"."storage_migrations" to "anon";

grant select on table "public"."storage_migrations" to "anon";

grant trigger on table "public"."storage_migrations" to "anon";

grant truncate on table "public"."storage_migrations" to "anon";

grant update on table "public"."storage_migrations" to "anon";

grant delete on table "public"."storage_migrations" to "authenticated";

grant insert on table "public"."storage_migrations" to "authenticated";

grant references on table "public"."storage_migrations" to "authenticated";

grant select on table "public"."storage_migrations" to "authenticated";

grant trigger on table "public"."storage_migrations" to "authenticated";

grant truncate on table "public"."storage_migrations" to "authenticated";

grant update on table "public"."storage_migrations" to "authenticated";

grant delete on table "public"."storage_migrations" to "service_role";

grant insert on table "public"."storage_migrations" to "service_role";

grant references on table "public"."storage_migrations" to "service_role";

grant select on table "public"."storage_migrations" to "service_role";

grant trigger on table "public"."storage_migrations" to "service_role";

grant truncate on table "public"."storage_migrations" to "service_role";

grant update on table "public"."storage_migrations" to "service_role";

grant delete on table "public"."type" to "anon";

grant insert on table "public"."type" to "anon";

grant references on table "public"."type" to "anon";

grant select on table "public"."type" to "anon";

grant trigger on table "public"."type" to "anon";

grant truncate on table "public"."type" to "anon";

grant update on table "public"."type" to "anon";

grant delete on table "public"."type" to "authenticated";

grant insert on table "public"."type" to "authenticated";

grant references on table "public"."type" to "authenticated";

grant select on table "public"."type" to "authenticated";

grant trigger on table "public"."type" to "authenticated";

grant truncate on table "public"."type" to "authenticated";

grant update on table "public"."type" to "authenticated";

grant delete on table "public"."type" to "service_role";

grant insert on table "public"."type" to "service_role";

grant references on table "public"."type" to "service_role";

grant select on table "public"."type" to "service_role";

grant trigger on table "public"."type" to "service_role";

grant truncate on table "public"."type" to "service_role";

grant update on table "public"."type" to "service_role";

grant delete on table "public"."types_of_repairs" to "anon";

grant insert on table "public"."types_of_repairs" to "anon";

grant references on table "public"."types_of_repairs" to "anon";

grant select on table "public"."types_of_repairs" to "anon";

grant trigger on table "public"."types_of_repairs" to "anon";

grant truncate on table "public"."types_of_repairs" to "anon";

grant update on table "public"."types_of_repairs" to "anon";

grant delete on table "public"."types_of_repairs" to "authenticated";

grant insert on table "public"."types_of_repairs" to "authenticated";

grant references on table "public"."types_of_repairs" to "authenticated";

grant select on table "public"."types_of_repairs" to "authenticated";

grant trigger on table "public"."types_of_repairs" to "authenticated";

grant truncate on table "public"."types_of_repairs" to "authenticated";

grant update on table "public"."types_of_repairs" to "authenticated";

grant delete on table "public"."types_of_repairs" to "service_role";

grant insert on table "public"."types_of_repairs" to "service_role";

grant references on table "public"."types_of_repairs" to "service_role";

grant select on table "public"."types_of_repairs" to "service_role";

grant trigger on table "public"."types_of_repairs" to "service_role";

grant truncate on table "public"."types_of_repairs" to "service_role";

grant update on table "public"."types_of_repairs" to "service_role";

grant delete on table "public"."types_of_vehicles" to "anon";

grant insert on table "public"."types_of_vehicles" to "anon";

grant references on table "public"."types_of_vehicles" to "anon";

grant select on table "public"."types_of_vehicles" to "anon";

grant trigger on table "public"."types_of_vehicles" to "anon";

grant truncate on table "public"."types_of_vehicles" to "anon";

grant update on table "public"."types_of_vehicles" to "anon";

grant delete on table "public"."types_of_vehicles" to "authenticated";

grant insert on table "public"."types_of_vehicles" to "authenticated";

grant references on table "public"."types_of_vehicles" to "authenticated";

grant select on table "public"."types_of_vehicles" to "authenticated";

grant trigger on table "public"."types_of_vehicles" to "authenticated";

grant truncate on table "public"."types_of_vehicles" to "authenticated";

grant update on table "public"."types_of_vehicles" to "authenticated";

grant delete on table "public"."types_of_vehicles" to "service_role";

grant insert on table "public"."types_of_vehicles" to "service_role";

grant references on table "public"."types_of_vehicles" to "service_role";

grant select on table "public"."types_of_vehicles" to "service_role";

grant trigger on table "public"."types_of_vehicles" to "service_role";

grant truncate on table "public"."types_of_vehicles" to "service_role";

grant update on table "public"."types_of_vehicles" to "service_role";

grant delete on table "public"."vehicles" to "anon";

grant insert on table "public"."vehicles" to "anon";

grant references on table "public"."vehicles" to "anon";

grant select on table "public"."vehicles" to "anon";

grant trigger on table "public"."vehicles" to "anon";

grant truncate on table "public"."vehicles" to "anon";

grant update on table "public"."vehicles" to "anon";

grant delete on table "public"."vehicles" to "authenticated";

grant insert on table "public"."vehicles" to "authenticated";

grant references on table "public"."vehicles" to "authenticated";

grant select on table "public"."vehicles" to "authenticated";

grant trigger on table "public"."vehicles" to "authenticated";

grant truncate on table "public"."vehicles" to "authenticated";

grant update on table "public"."vehicles" to "authenticated";

grant delete on table "public"."vehicles" to "service_role";

grant insert on table "public"."vehicles" to "service_role";

grant references on table "public"."vehicles" to "service_role";

grant select on table "public"."vehicles" to "service_role";

grant trigger on table "public"."vehicles" to "service_role";

grant truncate on table "public"."vehicles" to "service_role";

grant update on table "public"."vehicles" to "service_role";

grant delete on table "public"."work-diagram" to "anon";

grant insert on table "public"."work-diagram" to "anon";

grant references on table "public"."work-diagram" to "anon";

grant select on table "public"."work-diagram" to "anon";

grant trigger on table "public"."work-diagram" to "anon";

grant truncate on table "public"."work-diagram" to "anon";

grant update on table "public"."work-diagram" to "anon";

grant delete on table "public"."work-diagram" to "authenticated";

grant insert on table "public"."work-diagram" to "authenticated";

grant references on table "public"."work-diagram" to "authenticated";

grant select on table "public"."work-diagram" to "authenticated";

grant trigger on table "public"."work-diagram" to "authenticated";

grant truncate on table "public"."work-diagram" to "authenticated";

grant update on table "public"."work-diagram" to "authenticated";

grant delete on table "public"."work-diagram" to "service_role";

grant insert on table "public"."work-diagram" to "service_role";

grant references on table "public"."work-diagram" to "service_role";

grant select on table "public"."work-diagram" to "service_role";

grant trigger on table "public"."work-diagram" to "service_role";

grant truncate on table "public"."work-diagram" to "service_role";

grant update on table "public"."work-diagram" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."brand_vehicles"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."brand_vehicles"
as permissive
for select
to authenticated
using (true);


create policy "Enable insert for authenticated users only"
on "public"."category"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."category"
as permissive
for select
to public
using (true);


create policy "update category"
on "public"."category"
as permissive
for update
to authenticated
using (true);


create policy "Enable read access for all users"
on "public"."cities"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."companies_employees"
as permissive
for all
to public
using (true);


create policy "Enable insert for authenticated users only"
on "public"."company"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."company"
as permissive
for select
to public
using (true);


create policy "update company"
on "public"."company"
as permissive
for update
to authenticated
using (true);


create policy "Enable insert for authenticated users only"
on "public"."contacts"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."contacts"
as permissive
for select
to public
using (true);


create policy "update contacts"
on "public"."contacts"
as permissive
for update
to authenticated
using (true);


create policy "Enable insert for authenticated users only"
on "public"."contractor_employee"
as permissive
for all
to authenticated
using (true)
with check (true);


create policy "Enable read access for all users"
on "public"."contractor_employee"
as permissive
for all
to authenticated
using (true);


create policy "todos los permisos"
on "public"."contractor_equipment"
as permissive
for all
to authenticated
using (true);


create policy "Enable insert for authenticated users only"
on "public"."contractors"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."contractors"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."countries"
as permissive
for select
to public
using (true);


create policy "Enable insert for authenticated users only"
on "public"."covenant"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."covenant"
as permissive
for select
to public
using (true);


create policy "update covenant"
on "public"."covenant"
as permissive
for update
to authenticated
using (true);


create policy "Permitir insert a untenticados"
on "public"."custom_form"
as permissive
for insert
to authenticated
with check (true);


create policy "todos los permisos"
on "public"."custom_form"
as permissive
for all
to authenticated
using (true);


create policy "Enable insert for authenticated users only"
on "public"."customer_services"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."customer_services"
as permissive
for select
to public
using (true);


create policy "update_customer_services"
on "public"."customer_services"
as permissive
for update
to authenticated
using (true);


create policy "Enable insert for authenticated users only"
on "public"."customers"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."customers"
as permissive
for select
to public
using (true);


create policy "update customers"
on "public"."customers"
as permissive
for update
to authenticated
using (true);


create policy "insertar_y_editar_autenticados"
on "public"."dailyreport"
as permissive
for all
to authenticated
using (true);


create policy "insertar_y_editar_relation_employee"
on "public"."dailyreportemployeerelations"
as permissive
for all
to authenticated
using (true);


create policy "insertar_y_editar_relation_equipment"
on "public"."dailyreportequipmentrelations"
as permissive
for all
to authenticated
using (true);


create policy "insertar_y_editar_fila"
on "public"."dailyreportrows"
as permissive
for all
to authenticated
using (true);


create policy "Policy with security definer functions"
on "public"."diagram_type"
as permissive
for all
to authenticated
using (true);


create policy "permitir todo"
on "public"."diagrams_logs"
as permissive
for all
to authenticated
using (true);


create policy "Actualizar tipo de de documento"
on "public"."document_types"
as permissive
for update
to authenticated
using (true);


create policy "Enable insert for authenticated users onlyS"
on "public"."document_types"
as permissive
for insert
to public
with check (true);


create policy "Enable read access for all users"
on "public"."document_types"
as permissive
for all
to public
using (true)
with check (true);


create policy "Enable insert for authenticated users only"
on "public"."documents_company"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable update for users based on email"
on "public"."documents_company"
as permissive
for update
to public
using (true)
with check (true);


create policy "Permitir acceso a los autenticados"
on "public"."documents_company"
as permissive
for select
to authenticated
using (true);


create policy "Permitir eliminar"
on "public"."documents_company"
as permissive
for delete
to authenticated
using (true);


create policy "Enable insert for authenticated users only"
on "public"."documents_employees"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."documents_employees"
as permissive
for select
to public
using (true);


create policy "Permitir eliminar "
on "public"."documents_employees"
as permissive
for delete
to authenticated
using (true);


create policy "update"
on "public"."documents_employees"
as permissive
for update
to authenticated
using (true)
with check (true);


create policy "Enable insert for authenticated users only"
on "public"."documents_equipment"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."documents_equipment"
as permissive
for select
to public
using (true);


create policy "Permitir Eliminar"
on "public"."documents_equipment"
as permissive
for delete
to authenticated
using (true);


create policy "update"
on "public"."documents_equipment"
as permissive
for update
to authenticated
using (true)
with check (true);


create policy "Enable insert for authenticated users only"
on "public"."employees"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."employees"
as permissive
for select
to public
using (true);


create policy "New Policy Name"
on "public"."employees"
as permissive
for update
to public
using ((auth.uid() IN ( SELECT company.owner_id
   FROM company
  WHERE (employees.company_id = employees.company_id))));


create policy "Todos los permisos para los dueños de le empresa"
on "public"."employees"
as permissive
for all
to authenticated
using (true);


create policy "Enable insert for authenticated users only"
on "public"."employees_diagram"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."employees_diagram"
as permissive
for select
to authenticated
using (true);


create policy "Policy with security definer functions"
on "public"."employees_diagram"
as permissive
for all
to authenticated
using (true);


create policy "permitir todo"
on "public"."form_answers"
as permissive
for all
to authenticated, anon
using (true);


create policy "Enable insert for authenticated users only"
on "public"."guild"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."guild"
as permissive
for select
to public
using (true);


create policy "update guild"
on "public"."guild"
as permissive
for update
to authenticated
using (true);


create policy "Permitir todos los permisos"
on "public"."handle_errors"
as permissive
for all
to authenticated
using (true);


create policy "Enable read access for all users"
on "public"."hierarchy"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."industry_type"
as permissive
for select
to public
using (true);


create policy "permitir todo"
on "public"."measure_units"
as permissive
for all
to authenticated
using (true);


create policy "Enable read access for all users"
on "public"."model_vehicles"
as permissive
for all
to authenticated
using (true);


create policy "Enable read access for all userss"
on "public"."model_vehicles"
as permissive
for all
to authenticated;


create policy "Enable delete"
on "public"."notifications"
as permissive
for delete
to public
using (true);


create policy "Enable insert access for all users"
on "public"."notifications"
as permissive
for insert
to public
with check (true);


create policy "Enable read access for all users"
on "public"."notifications"
as permissive
for select
to public
using (true);


create policy "Enable acces for users serviceRole"
on "public"."profile"
as permissive
for all
to pgsodium_keyiduser, pgsodium_keyholder, pgsodium_keymaker, authenticated, anon, service_role, supabase_replication_admin, supabase_read_only_user
using (true)
with check (true);


create policy "Enable read access for all users"
on "public"."profile"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."provinces"
as permissive
for select
to public
using (true);


create policy "Permitir autenticados"
on "public"."repair_solicitudes"
as permissive
for all
to authenticated
using (true);


create policy "Permitir todo"
on "public"."repairlogs"
as permissive
for all
to authenticated
using (true);


create policy "Enable read access for all users"
on "public"."roles"
as permissive
for select
to public
using (true);


create policy "Enable insert for authenticated users only"
on "public"."service_items"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."service_items"
as permissive
for select
to authenticated
using (true);


create policy "update_services_items"
on "public"."service_items"
as permissive
for update
to authenticated
using (true);


create policy "Enable read access for all users"
on "public"."share_company_users"
as permissive
for select
to public
using (true);


create policy "permisos"
on "public"."share_company_users"
as permissive
for all
to authenticated
using (true)
with check (true);


create policy "Permitir todo autenticado"
on "public"."type"
as permissive
for all
to authenticated
using (true);


create policy "Acceso a los autenticados"
on "public"."types_of_repairs"
as permissive
for all
to authenticated
using (true);


create policy "Enable insert for authenticated users only"
on "public"."types_of_vehicles"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."types_of_vehicles"
as permissive
for select
to authenticated
using (true);


create policy "Permitir todo"
on "public"."vehicles"
as permissive
for all
to authenticated, anon
using (true);


create policy "Enable read access for all users"
on "public"."work-diagram"
as permissive
for select
to public
using (true);


CREATE TRIGGER update_company_by_defect_trigger AFTER INSERT OR UPDATE OF by_defect ON public.company FOR EACH ROW EXECUTE FUNCTION update_company_by_defect();

CREATE TRIGGER after_service_update AFTER UPDATE OF is_active ON public.customer_services FOR EACH ROW WHEN ((old.is_active IS DISTINCT FROM new.is_active)) EXECUTE FUNCTION deactivate_service_items();

CREATE TRIGGER add_new_document_trigger AFTER INSERT ON public.document_types FOR EACH ROW EXECUTE FUNCTION add_new_document();

CREATE TRIGGER document_employee_changes_trigger AFTER INSERT OR UPDATE ON public.documents_employees FOR EACH ROW EXECUTE FUNCTION log_document_employee_changes();

CREATE TRIGGER document_update_trigger AFTER UPDATE OF state ON public.documents_employees FOR EACH ROW EXECUTE FUNCTION notify_document_update();

CREATE TRIGGER trg_update_documents_employees AFTER UPDATE ON public.documents_employees FOR EACH ROW EXECUTE FUNCTION update_status_trigger();

CREATE TRIGGER document_equipment_changes_trigger AFTER INSERT OR UPDATE ON public.documents_equipment FOR EACH ROW EXECUTE FUNCTION log_document_equipment_changes();

CREATE TRIGGER equipment_update_trigger AFTER UPDATE OF state ON public.documents_equipment FOR EACH ROW EXECUTE FUNCTION notify_document_update();

CREATE TRIGGER trg_update_documents_equipment AFTER UPDATE ON public.documents_equipment FOR EACH ROW EXECUTE FUNCTION update_status_trigger();

CREATE TRIGGER after_employee_insert AFTER INSERT ON public.employees FOR EACH ROW EXECUTE FUNCTION add_to_companies_employees();

CREATE TRIGGER trg_employees_diagram_changes AFTER INSERT OR UPDATE ON public.employees_diagram FOR EACH ROW EXECUTE FUNCTION handle_employees_diagram_changes();

CREATE TRIGGER trigger_log_repair_changes AFTER INSERT OR UPDATE ON public.repair_solicitudes FOR EACH ROW EXECUTE FUNCTION log_repair_changes();

CREATE TRIGGER after_service_update AFTER UPDATE OF is_active ON public.service_items FOR EACH ROW WHEN ((old.is_active IS DISTINCT FROM new.is_active)) EXECUTE FUNCTION deactivate_service_items();

CREATE TRIGGER add_contractor_equipment_after_insert AFTER INSERT ON public.vehicles FOR EACH ROW EXECUTE FUNCTION equipment_allocated_to();


